<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database on 米粒儿</title><link>https://www.yangdiy.cn/categories/database/</link><description>Recent content in Database on 米粒儿</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 10 Jan 2025 18:05:42 +0800</lastBuildDate><atom:link href="https://www.yangdiy.cn/categories/database/index.xml" rel="self" type="application/rss+xml"/><item><title>Redis-八股题</title><link>https://www.yangdiy.cn/p/redis/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><guid>https://www.yangdiy.cn/p/redis/</guid><description>&lt;p>&lt;img src="./assets/%E4%B8%8B%E8%BD%BD.webp"
loading="lazy"
alt="下载"
>&lt;/p>
&lt;h2 id="数据结构">数据结构
&lt;/h2>&lt;h3 id="1-redis的数据类型以及实现的原理">1. Redis的数据类型以及实现的原理
&lt;/h3>&lt;p>Redis 中&lt;strong>5 种基础数据类型&lt;/strong>：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。&lt;/p>
&lt;p>又支持了四种数据类型： &lt;strong>BitMap（2.2 版新增）、HyperLogLog（2.8 版新增）、GEO（3.2 版新增）、Stream（5.0 版新增）&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="./assets/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.webp"
loading="lazy"
alt="基本数据类型和数据结构对应关系"
>&lt;/p>
&lt;p>这些数据结构均为值的底层实现方式，在 Redis 中，核心在于键与值之间的组织。只要理解了这一核心要点，那么对于其他数据结构的操作，其实就是先找到值，然后在集合中进行相关操作。&lt;/p>
&lt;p>Redis 使用了一个哈希表来保存所有键值对，一个哈希表，其实就是一个数组，数组的每个元素称为一个哈希桶。哈希表的每一项是一个 dictEntry 的结构体，dictEntry 结构中有三个 8 字节的指针，分别指向 key、value 以及下一个 dictEntry，三个指针共 24 字节。值保存的并不是值本身，而是指向具体值的指针。&lt;/p>
&lt;p>Redis 会用一个 RedisObject 结构体来统一记录各个数据类型的元数据，同时指向实际数据。一个 RedisObject 包含了 8 字节的元数据和一个 8 字节指针。&lt;/p>
&lt;p>&lt;img src="./assets/redis%e5%ba%95%e5%b1%82%e7%bb%93%e6%9e%84.webp"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h3 id="2-哈希表存在的冲突问题">2. 哈希表存在的冲突问题
&lt;/h3>&lt;p>当你往哈希表中写入更多数据时，可能两个 key 的哈希值和哈希桶计算对应关系时，正好落在了同一个哈希桶中。这就是哈希表存在的冲突问题。&lt;/p>
&lt;p>Redis 解决哈希冲突的方式，就是链式哈希，就是指&lt;strong>同一个哈希桶中的多个元素用一个链表来保存，它们之间依次用指针连接&lt;/strong>。&lt;/p>
&lt;h3 id="3-为什么需要rehash">3. 为什么需要rehash？
&lt;/h3>&lt;p>哈希冲突链上的元素只能通过指针逐一查找再操作。如果哈希表里写入的数据越来越多，哈希冲突可能也会越来越多，这就会导致某些哈希冲突链过长，进而导致这个链上的元素查找耗时长，效率降低。&lt;/p>
&lt;p>所以需要rehash操作，也就是增加现有的哈希桶数量，让逐渐增多的 entry 元素能在更多的桶之间分散保存，减少单个桶中的元素数量，从而减少单个桶中的冲突。&lt;/p>
&lt;h3 id="4-rehash是怎么做的rehash会带来什么问题怎么解决">4. rehash是怎么做的，rehash会带来什么问题？怎么解决？
&lt;/h3>&lt;p>Redis 默认有两个全局哈希表：哈希表 1 和哈希表 2。开始插入数据时用哈希表 1，此时哈希表 2 未分配空间。数据增多时执行 rehash，分三步：&lt;/p>
&lt;ul>
&lt;li>给哈希表 2 分配更大空间，如哈希表 1 的两倍；&lt;/li>
&lt;li>把哈希表 1 数据重新映射并拷贝到哈希表 2；&lt;/li>
&lt;li>释放哈希表 1 空间，然后切换到哈希表 2 保存更多数据，哈希表 1 留作下次 rehash 扩容备用。&lt;/li>
&lt;/ul>
&lt;p>（就是把数据向另一个更大的表拷贝了一下，之后就是两个表相互这样倒腾。）&lt;/p>
&lt;p>存在一个问题：如果一次性把哈希表 1 中的数据都迁移完，会造成 Redis 线程阻塞，无法服务其他请求。此时，Redis 就无法快速访问数据了。&lt;/p>
&lt;p>解决这个问题，采用&lt;strong>渐进式 rehash&lt;/strong>。&lt;/p>
&lt;p>在第二步拷贝数据时，Redis 正常处理客户端请求。每处理一个请求，就从哈希表 1 的第一个索引位置开始，顺带把此索引位置的所有 entries 拷贝到哈希表 2 。处理下一个请求时，再顺带拷贝哈希表 1 下一个索引位置的 entries。&lt;/p>
&lt;p>&lt;strong>渐进式 rehash&lt;/strong>巧妙地把一次性大量拷贝的开销，分摊到了多次处理请求的过程中，避免了耗时操作，保证了数据的快速访问。&lt;/p>
&lt;p>&lt;img src="./assets/%e6%b8%90%e8%bf%9b%e5%bc%8frehash.webp"
loading="lazy"
alt="渐进式rehash"
>&lt;/p>
&lt;blockquote>
&lt;p>如果有新的请求进来，在rehash过程中：&lt;/p>
&lt;p>对于查询、删除、更新等操作，Redis 会先在当前正在使用的哈希表（一般称为旧表）中进行查找。如果没有找到，再到正在 rehash 的新哈希表中查找。&lt;/p>
&lt;p>对于插入操作，如果当前正在 rehash，新元素可能会被插入到新哈希表中，以加快 rehash 的完成。&lt;/p>
&lt;/blockquote>
&lt;h3 id="5-整数数组和压缩列表在查找时间复杂度方面并没有很大的优势那为什么-redis-还会把它们作为底层数据结构呢">5. 整数数组和压缩列表在查找时间复杂度方面并没有很大的优势，那为什么 Redis 还会把它们作为底层数据结构呢？
&lt;/h3>&lt;ul>
&lt;li>整数数组和压缩列表在存储相对紧凑的数据时，能够更有效地利用内存空间。相比于一些更复杂的数据结构，它们减少了内存开销和内存碎片的产生。&lt;/li>
&lt;li>在数据量较小且操作相对简单的场景下，整数数组和压缩列表的实现较为简单，操作的性能开销相对较低，可以更好地利用 CPU 的缓存机制，提高数据访问的效率。&lt;/li>
&lt;li>即使当进行随机访问时，虽然不是顺序访问，但由于数组元素的内存地址相邻，第一次访问某个元素可能未命中高速缓存，但相邻元素被加载进高速缓存的概率较大。&lt;/li>
&lt;/ul>
&lt;h3 id="string">string
&lt;/h3>&lt;h4 id="内部实现">内部实现
&lt;/h4>&lt;p>String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。&lt;/p>
&lt;p>简单动态字符串（Simple Dynamic String，SDS）结构体，如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>buf：字节数组，保存实际数据。为了表示字节数组的结束，Redis 会自动在数组最后加一个“\0”，这就会额外占用 1 个字节的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>len：占 4 个字节，表示 buf 的已用长度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>alloc：也占个 4 字节，表示 buf 的实际分配长度，一般大于 len。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>分配方式：&lt;/p>
&lt;ul>
&lt;li>当保存的是 Long 类型整数时，RedisObject 中的指针就直接赋值为整数数据了，这样就不用额外的指针再指向整数了，节省了指针的空间开销。&lt;/li>
&lt;li>embstr 编码方式：当保存的是字符串数据，并且字符串小于等于 44 字节时，RedisObject 中的元数据、指针和 SDS 是一块连续的内存区域，这样就可以避免内存碎片。&lt;/li>
&lt;li>raw 编码：当字符串大于 44 字节时，SDS 的数据量就开始变多了，Redis 就不再把 SDS 和 RedisObject 布局在一起了，而是会给 SDS 分配独立的空间，并用指针指向 SDS 结构。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/sds.webp"
loading="lazy"
alt="sds"
>&lt;/p>
&lt;p>embstr 与 raw 编码优缺点：&lt;/p>
&lt;ul>
&lt;li>&lt;code>embstr&lt;/code>编码将创建字符串对象所需的内存分配次数从 &lt;code>raw&lt;/code> 编码的两次降低为一次；&lt;/li>
&lt;li>释放 &lt;code>embstr&lt;/code>编码的字符串对象同样只需要调用一次内存释放函数；&lt;/li>
&lt;li>因为&lt;code>embstr&lt;/code>编码的字符串对象的所有数据都保存在一块连续的内存里面可以更好的利用 CPU 缓存提升性能。&lt;/li>
&lt;li>&lt;strong>embstr编码的字符串对象实际上是只读的&lt;/strong>，redis没有为embstr编码的字符串对象编写任何相应的修改程序。当我们对embstr编码的字符串对象执行任何修改命令（例如append）时，程序会先将对象的编码从embstr转换成raw，然后再执行修改命令。&lt;/li>
&lt;/ul>
&lt;h4 id="应用场景">应用场景
&lt;/h4>&lt;ul>
&lt;li>缓存对象&lt;/li>
&lt;li>分布式锁&lt;/li>
&lt;li>共享 Session 信息&lt;/li>
&lt;/ul>
&lt;h3 id="list">List
&lt;/h3>&lt;h3 id="bitmap">BitMap
&lt;/h3>&lt;p>Bitmap，即位图，是一串连续的二进制数组（0和1），可以通过偏移量（offset）定位元素。BitMap通过最小的单位bit来进行&lt;code>0|1&lt;/code>的设置，表示某个元素的值或者状态，时间复杂度为O(1)。&lt;/p>
&lt;h4 id="内部实现-1">内部实现
&lt;/h4>&lt;p>Bitmap 本身是用 &lt;strong>动态字符串 (SDS, Simple Dynamic String)&lt;/strong> 作为底层数据结构实现的一种统计二值状态的数据类型。&lt;/p>
&lt;p>Redis 将其存储为普通的字符串对象，但允许对其进行位操作，可以把 Bitmap 看作是一个 bit 数组。&lt;/p>
&lt;h4 id="应用场景-1">应用场景
&lt;/h4>&lt;p>Bitmap 类型非常适合二值状态统计的场景，这里的二值状态就是指集合元素的取值就只有 0 和 1 两种，在记录海量数据时，Bitmap 能够有效地节省内存空间。&lt;/p>
&lt;ul>
&lt;li>签到统计&lt;/li>
&lt;li>判断用户登录态
&lt;ul>
&lt;li>一个 key = login_status 表示存储用户登陆状态集合数据， 将用户 ID 作为 offset，在线就设置为 1，下线设置 0。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>连续签到用户总数
&lt;ul>
&lt;li>提供了 &lt;code>BITOP operation destkey key [key ...]&lt;/code>这个指令用于对一个或者多个 key 的 Bitmap 进行位元操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="hyperloglog">HyperLogLog
&lt;/h3>&lt;p>HyperLogLog 是是一种用于「统计基数」的数据集合类型，基数统计就是指统计一个集合中不重复的元素个数。但要注意，HyperLogLog 是统计规则是基于概率完成的，不是非常准确，标准误算率是 0.81%。&lt;/p>
&lt;p>HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的内存空间总是固定的、并且是很小的。&lt;/p>
&lt;p>在 Redis 里面，&lt;strong>每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 &lt;code>2^64&lt;/code> 个不同元素的基数&lt;/strong>。&lt;/p>
&lt;h4 id="应用场景-2">应用场景
&lt;/h4>&lt;ul>
&lt;li>统计百万级以上的网页 UV 的场景&lt;/li>
&lt;/ul>
&lt;h3 id="geo">GEO
&lt;/h3>&lt;p>GEO 主要用于存储地理位置信息，并对存储的信息进行操作。&lt;/p>
&lt;h4 id="内部实现-2">内部实现
&lt;/h4>&lt;p>GEO 本身并没有设计新的底层数据结构，而是直接使用了 Sorted Set 集合类型。&lt;/p>
&lt;p>GEO 类型使用 GeoHash 编码方法实现了经纬度到 Sorted Set 中元素权重分数的转换，这其中的两个关键机制就是「二分区间」和「区间编码」。&lt;/p>
&lt;p>当我们要对一组经纬度进行 GeoHash 编码时，我们要先对经度和纬度分别编码，然后再把经纬度各自的编码组合成一个最终编码。&lt;/p>
&lt;p>具体编码过程：&lt;/p>
&lt;ul>
&lt;li>GeoHash 编码会把一个经度值编码成一个 N 位的二进制，具体是对经度范围[-180,180]做 N 次的二分区操作，其中 N 可以自定义，你落在哪个分区，该位置上取0/1.&lt;/li>
&lt;li>纬度同上&lt;/li>
&lt;li>最终编码值的偶数位上依次是经度的编码值，奇数位上依次是纬度的编码值，其中，偶数位从 0 开始，奇数位从 1 开始。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/geohash.webp"
loading="lazy"
alt="geohash"
>&lt;/p>
&lt;blockquote>
&lt;p>可以理解成「对二维地图进行区间划分」，「对区间进行编码」，经纬度落在哪个区间，那就是对应的二进制值。&lt;/p>
&lt;/blockquote>
&lt;h4 id="应用场景-3">应用场景
&lt;/h4>&lt;p>LBS （Location-Based Service）应用访问的数据是和人或物关联的一组经纬度信息，而且要能查询相邻的经纬度范围，GEO 就非常适合应用在 LBS 服务的场景中。&lt;/p>
&lt;h2 id="线程模型">线程模型
&lt;/h2>&lt;h3 id="1-redis-为什么是单线程的">1. redis 为什么是单线程的？
&lt;/h3>&lt;p>增加线程数，系统吞吐率会增加，但是，再进一步增加线程时，系统吞吐率就增长迟缓了，有时甚至还会出现下降的情况。&lt;/p>
&lt;h3 id="2-单线程的redis-为什么这么快呢">2. 单线程的redis 为什么这么快呢？
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Redis 的大部分操作在内存上完成，再加上它采用了高效的数据结构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>采用单线程模型可以&lt;strong>避免了多线程之间的竞争&lt;/strong>，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Redis 采用了&lt;strong>多路复用机制&lt;/strong>，使其在网络 IO 操作中能并发处理大量的客户端请求，实现高吞吐率。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-基本io模型会存在什么问题">3. 基本IO模型会存在什么问题？
&lt;/h3>&lt;p>存在阻塞问题：&lt;/p>
&lt;p>以一个Get请求为例，需要监听客户端请求（bind/listen），和客户端建立连接（accept），从 socket 中读取请求（recv），解析客户端发送请求（parse），根据请求类型读取键值数据（get），最后给客户端返回结果（send）。&lt;/p>
&lt;p>这个六个过程有潜在的阻塞点，分别是 accept() 和 recv()。&lt;/p>
&lt;p>当 Redis 监听到一个客户端有连接请求，但一直未能成功建立起连接时，会阻塞在 accept() 函数这里，导致其他客户端无法和 Redis 建立连接。当 Redis 通过 recv() 从一个客户端读取数据时，如果数据一直没有到达，Redis 也会一直阻塞在 recv()。&lt;/p>
&lt;p>存在大量线程创建导致资源浪费：&lt;/p>
&lt;p>每个用户请求到来都得占用一个进程来处理，来一个请求就要分配一个进程跟进处理，显然在高并发的情况下会导致资源的浪费&lt;/p>
&lt;h3 id="4-什么是多路复用">4. 什么是多路复用
&lt;/h3>&lt;p>在 Redis 只运行单线程的情况下，&lt;strong>该机制允许内核中，同时存在多个监听套接字和已连接套接字&lt;/strong>。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理。&lt;/p>
&lt;p>当被监听的套接字准备执行连接应答（accept）、读取（read）、写入（write）、关 闭（close）等操作时，与操作相对应的文件事件就会产生，这些事件会被放进一个事件队列，不同事件会调用相应的处理函数，这就实现了基于事件的回调。&lt;/p>
&lt;img src="./assets/redis单线程模型.drawio.png" alt="img" style="zoom: 33%;" />
&lt;h3 id="5-在redis-io-模型还有哪些潜在的性能瓶颈吗">5. 在Redis IO 模型，还有哪些潜在的性能瓶颈吗？
&lt;/h3>&lt;ol>
&lt;li>任意一个请求在server中一旦发生耗时，都会影响整个server的性能，也就是说后面的请求都要等前面这个耗时请求处理完成，自己才能被处理到。耗时的操作包括以下几种：
&lt;ol>
&lt;li>操作bigkey：写入一个bigkey在分配内存时需要消耗更多的时间，同样，删除bigkey释放内存同样会产生耗时；&lt;/li>
&lt;li>使用复杂度过高的命令：例如SORT/SUNION/ZUNIONSTORE，或者O(N)命令，但是N很大，例如lrange key 0 -1一次查询全量数据；&lt;/li>
&lt;li>大量key集中过期：Redis的过期机制也是在主线程中执行的，大量key集中过期会导致处理一个请求时，耗时都在删除过期key，耗时变长；&lt;/li>
&lt;li>淘汰策略：淘汰策略也是在主线程执行的，当内存超过Redis内存上限后，每次写入都需要淘汰一些key，也会造成耗时变长；&lt;/li>
&lt;li>AOF刷盘开启always机制：每次写入都需要把这个操作刷到磁盘，写磁盘的速度远比写内存慢，会拖慢Redis的性能；&lt;/li>
&lt;li>主从全量同步生成RDB：虽然采用fork子进程生成数据快照，但fork这一瞬间也是会阻塞整个线程的，实例越大，阻塞时间越久；&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>并发量非常大时，单线程读写客户端IO数据存在性能瓶颈，虽然采用IO多路复用机制，但是读写客户端数据依旧是同步IO，只能单线程依次读取客户端的数据，无法利用到CPU多核。&lt;/li>
&lt;/ol>
&lt;p>针对问题1，一方面需要业务人员去规避，一方面Redis在4.0推出了lazy-free机制，把bigkey释放内存的耗时操作放在了异步线程中执行，降低对主线程的影响。&lt;/p>
&lt;p>针对问题2，Redis在6.0推出了多线程，可以在高并发场景下利用CPU多核多线程读写客户端数据，进一步提升server性能，当然，只是针对客户端的读写是并行的，每个命令的真正操作依旧是单线程的。&lt;/p>
&lt;h3 id="为什么redis60后引入多线程">为什么redis6.0后引入多线程
&lt;/h3>&lt;p>&lt;strong>Redis 采用单线程设计的原因&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>基于内存操作，多数操作性能瓶颈非 CPU 导致。&lt;/li>
&lt;li>单线程模型代码简便，可减少线程上下文切换的性能开销。&lt;/li>
&lt;li>单线程结合 I/O 多路复用模型能提高 I/O 利用率。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Redis 6.0 版本引入多线程的原因&lt;/strong>：随着数据规模和请求量增加，执行瓶颈主要在网络 I/O，引入多线程可提高网络 I/O 处理速度。&lt;/p>
&lt;h2 id="存储">存储
&lt;/h2>&lt;h3 id="1-redis是如何实现持久化">1. Redis是如何实现持久化？
&lt;/h3>&lt;p>Redis 共有三种数据持久化的方式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AOF 日志&lt;/strong>：每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里；&lt;/li>
&lt;li>&lt;strong>RDB 快照&lt;/strong>：将某一时刻的内存数据，以二进制的方式写入磁盘；&lt;/li>
&lt;li>&lt;strong>混合持久化方式&lt;/strong>：Redis 4.0 新增的方式，集成了 AOF 和 RBD 的优点；&lt;/li>
&lt;/ul>
&lt;h3 id="2-aof有什么优点以及有什么风险">2. AOF有什么优点以及有什么风险
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>避免额外的检查开销&lt;/strong>：因为如果先将写操作命令记录到 AOF 日志里，再执行该命令的话，如果当前的命令语法有问题，那么如果不进行命令语法检查，该错误的命令记录到 AOF 日志里后，Redis 在使用日志恢复数据时，就可能会出错。&lt;/li>
&lt;li>&lt;strong>不会阻塞当前写操作命令的执行&lt;/strong>：因为当写操作命令执行成功后，才会将命令记录到 AOF 日志。&lt;/li>
&lt;/ul>
&lt;p>当然，这样做也会带来风险：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>数据可能会丢失：&lt;/strong> 执行写操作命令和记录日志是两个过程，那当 Redis 在还没来得及将命令写入到硬盘时，服务器发生宕机了，这个数据就会有丢失的风险。&lt;/li>
&lt;li>&lt;strong>可能阻塞其他操作：&lt;/strong> 由于写操作命令执行成功后才记录到 AOF 日志，所以不会阻塞当前命令的执行，但因为 AOF 日志也是在主线程中执行，所以当 Redis 把日志文件写入磁盘的时候，还是会阻塞后续的操作无法执行。&lt;/li>
&lt;/ul>
&lt;h3 id="3-aof-写回策略">3. AOF 写回策略
&lt;/h3>&lt;p>AOF 风险与AOF回写磁盘是有关的，控制一个写命令执行完后 AOF 日志写回磁盘的时机，风险就会解除。&lt;/p>
&lt;p>三种策略：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Always&lt;/strong>，同步写回：每个写命令执行完，立马同步地将日志写回磁盘；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Everysec&lt;/strong>，每秒写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>No&lt;/strong>，操作系统控制的写回：每个写命令执行完，只是先把日志写到 AOF 文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/98987d9417b2bab43087f45fc959d32a-20230309232253633.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>总结：想要获得高性能，就选择 No 策略；如果想要得到高可靠性保证，就选择 Always 策略；如果允许数据有一点丢失，又希望性能别受太大影响的话，那么就选择 Everysec 策略。&lt;/p>
&lt;h3 id="4-日志文件太大怎么办">4. 日志文件太大怎么办？
&lt;/h3>&lt;p>AOF 文件过大带来的性能问题，主要在于以下三个方面：&lt;/p>
&lt;ul>
&lt;li>文件系统本身对文件大小有限制，无法保存过大的文件；&lt;/li>
&lt;li>如果文件太大，之后再往里面追加命令记录的话，效率也会变低；&lt;/li>
&lt;li>如果发生宕机，AOF 中记录的命令要一个个被重新执行，用于故障恢复，如果日志文件太大，整个恢复过程就会非常缓慢，这就会影响到 Redis 的正常使用。&lt;/li>
&lt;/ul>
&lt;p>Redis 为了避免 AOF 文件越写越大，提供了 &lt;strong>AOF 重写机制&lt;/strong>，当 AOF 文件的大小超过所设定的阈值后，Redis 就会启用 AOF 重写机制，来压缩 AOF 文件。&lt;/p>
&lt;p>重写的流程：根据这个键值对当前的最新状态，为它生成对应的写入命令。相当于旧日志文件中的多条命令，在重写后的新日志中变成了一条命令。&lt;/p>
&lt;p>你也可以理解成&lt;strong>redis最新状态的保存&lt;/strong>&lt;/p>
&lt;p>&lt;img src="./assets/redis%e9%87%8d%e5%86%99%e6%9c%ba%e5%88%b6.webp"
loading="lazy"
alt="redis重写机制"
>&lt;/p>
&lt;h3 id="5-aof重写会阻塞吗">5. AOF重写会阻塞吗？
&lt;/h3>&lt;p>&lt;strong>一个拷贝，两处日志&lt;/strong>&lt;/p>
&lt;p>AOF重写会通过 &lt;code>fork&lt;/code> 创建一个子进程 &lt;code>bgrewriteaof&lt;/code>，由子进程完成重写工作，不阻塞主线程处理请求，保障了服务的高可用性。&lt;/p>
&lt;ol>
&lt;li>主线程 fork 出一个子进程进行 AOF 重写操作，子进程独立完成新 AOF 文件的生成，避免主线程阻塞。&lt;/li>
&lt;li>子进程基于拷贝的数据，逐步将操作记录写入新的 AOF 文件。&lt;/li>
&lt;li>主线程不会因为 AOF 重写而阻塞，能够继续处理读写请求。
&lt;ul>
&lt;li>新的写操作会先写入现有的 AOF 文件，以确保数据持久性。&lt;/li>
&lt;li>同时，这些写操作也会被记录到子进程的重写缓冲区中，以保证新的 AOF 文件包含最新的操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>重写完成后，新的 AOF 文件替代旧文件。&lt;/li>
&lt;/ol>
&lt;h3 id="6-aof-日志重写的时候是由-bgrewriteaof-子进程来完成的不用主线程参与这个重写过程有没有其他潜在的阻塞风险呢如果有的话会在哪里阻塞">6. AOF 日志重写的时候，是由 bgrewriteaof 子进程来完成的，不用主线程参与，这个重写过程有没有其他潜在的阻塞风险呢？如果有的话，会在哪里阻塞？
&lt;/h3>&lt;p>风险一：Redis 主线程 fork 创建 bgrewriteaof 子进程时，内核需要创建用于管理子进程的相关数据结构，这些数据结构在操作系统中通常叫作进程控制块（Process Control Block，简称为 PCB）。内核要把主线程的 PCB 内容拷贝给子进程。这个创建和拷贝过程由内核执行，是会阻塞主线程的。而且，在拷贝过程中，子进程要拷贝父进程的页表，这个过程的耗时和 Redis 实例的内存大小有关。如果 Redis 实例内存大，页表就会大，fork 执行时间就会长，这就会给主线程带来阻塞风险。&lt;/p>
&lt;p>风险二：bgrewriteaof 子进程会和主线程共享内存。当主线程收到新写或修改的操作时，主线程会申请新的内存空间，用来保存新写或修改的数据，如果操作的是 bigkey，也就是数据量大的集合类型数据，那么，主线程会因为申请大空间而面临阻塞风险。因为操作系统在分配内存空间时，有查找和锁的开销，这就会导致阻塞。&lt;/p>
&lt;h3 id="7-aof-重写也有一个重写日志为什么它不共享使用-aof-本身的日志呢">7. AOF 重写也有一个重写日志，为什么它不共享使用 AOF 本身的日志呢？
&lt;/h3>&lt;ul>
&lt;li>竞争问题&lt;/li>
&lt;li>保证一致性和安全性&lt;/li>
&lt;/ul>
&lt;h3 id="8-什么是内存快照对哪些数据做内存快照">8. 什么是内存快照，对哪些数据做内存快照？
&lt;/h3>&lt;p>用 AOF 方法进行故障恢复的时候，需要逐一把操作日志都执行一遍。如果操作日志非常多，Redis 就会恢复得很缓慢，影响到正常使用。所以需要另一种持久化方法：&lt;strong>内存快照&lt;/strong>。就是指内存中的数据在某一个时刻的状态记录。&lt;/p>
&lt;p>为了提供所有数据的可靠性保证，它执行的是&lt;strong>全量快照&lt;/strong>，也就是说，把内存中的所有数据都记录到磁盘中。&lt;/p>
&lt;p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>save：在主线程中执行，会导致阻塞；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>bgsave：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是 Redis RDB 文件生成的默认配置。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="9-做快照时数据还能被增删改吗是否会发生阻塞">9. 做快照时，数据还能被增删改吗，是否会发生阻塞？
&lt;/h3>&lt;p>Redis 就会借助操作系统提供的&lt;strong>写时复制技术（Copy-On-Write, COW）&lt;/strong>，在执行快照的同时，正常处理写操作。&lt;/p>
&lt;p>具体过程是：bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。如果主线程对这些数据也都是读操作，那么，主线程和 bgsave 子进程相互不影响。如果主线程要修改一块数据那么，这块数据就会被复制一份，生成该数据的副本。然后，主线程在这个数据副本上进行修改。同时，bgsave 子进程可以继续把原来的数据写入 RDB 文件。&lt;/p>
&lt;p>写时复制优缺点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点：减少不必要的资源分配，节省宝贵的物理内存。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点：如果在子进程存在期间发生了大量写操作，那么会频繁地产生页面错误，不断陷入内核，复制页面。这反而会降低效率。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="10-执行快照的间隔时间如何选择">10. 执行快照的间隔时间如何选择？
&lt;/h3>&lt;ul>
&lt;li>快照的间隔时间变得很短，即使某一时刻发生宕机了，因为上一时刻快照刚执行，丢失的数据也不会太多。&lt;/li>
&lt;li>但是频繁将全量数据写入磁盘，会给磁盘带来很大压力，同时bgsave 子进程需要通过 fork 操作从主线程创建出来。fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。&lt;/li>
&lt;/ul>
&lt;p>基于此很难将间隔时间选择的很好。&lt;/p>
&lt;h3 id="11-有什么方法既能利用-rdb-的快速恢复又能以较小的开销做到尽量少丢数据呢">11. 有什么方法既能利用 RDB 的快速恢复，又能以较小的开销做到尽量少丢数据呢
&lt;/h3>&lt;p>Redis 4.0 中提出了一个&lt;strong>混合使用 AOF 日志和内存快照&lt;/strong>的方法。内存快照以一定的频率执行，在两次快照之间，使用 AOF 日志记录这期间的所有命令操作。&lt;/p>
&lt;p>快照不用很频繁地执行，这就避免了频繁 fork 对主线程的影响。而且，AOF 日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。&lt;/p>
&lt;h3 id="redis-中的内存碎片化是什么如何进行优化">Redis 中的内存碎片化是什么？如何进行优化？
&lt;/h3>&lt;p>Redis 的内存碎片化是指内存使用中出现小块空间被闲置，无法被有效利用的现象。&lt;/p>
&lt;p>如何形成：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>内因：Redis 默认使用 jemalloc 作为内存分配器，它是按照固定大小来分配内存的，比如实际需要 8kb 的内存，分配器给了 12kb。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>外因：频繁创建和删除大量数据的时候，会导致内存块大小和位置不连续，内存碎片会变多。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>可以通过 &lt;code>INFO memory&lt;/code> 命令查看内存碎片率(&lt;code>mem_fragmentation_ratio&lt;/code>)：&lt;/p>
&lt;p>&lt;code>mem_fragmentation_ratio = used_memory_rss / used_memory&lt;/code>，所以大于 1 就代表有内存碎片。大于1.5需要降低内存碎片率了。&lt;/p>
&lt;p>如何解决内存碎片：&lt;/p>
&lt;ol>
&lt;li>最简单的解决方法是定期重启 Redis 服务，这样可以消除内存碎片并优化内存的布局，但是会导致服务不可用。&lt;/li>
&lt;li>Redis 4.0 及以上版本引入了内存碎片整理功能。通过配置 &lt;code>activedefrag&lt;/code> 选项，Redis 可以在运行时尝试整理内存碎片，将小的内存块合并为更大的块。&lt;/li>
&lt;li>通过优化数据存储结构和类型。如：使用 ListPack 替代 ziplist。&lt;/li>
&lt;li>利用 &lt;code>MEMORY PURGE&lt;/code> 命令手动清理碎片，但是这个命令&lt;strong>会阻塞主线程&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;h2 id="高可用">高可用
&lt;/h2>&lt;h3 id="1-主从复制如何保证高可用">1. 主从复制如何保证高可用？
&lt;/h3>&lt;p>Redis 提供了主从库模式，以保证数据副本的一致，主从库之间采用的是读写分离的方式。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>读操作：主库、从库都可以接收；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>写操作：首先到主库执行，然后，主库将写操作同步给从库，使得主从库的数据是一致的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="2-主从库间的第一次同步是如何进行的">2. 主从库间的第一次同步是如何进行的
&lt;/h3>&lt;ul>
&lt;li>第一阶段是&lt;strong>主从库间建立连接、协商同步&lt;/strong>的过程，主要是为全量复制做准备。
&lt;ul>
&lt;li>从库给主库发送 psync 命令，表示要进行数据同步，psync 命令包含了&lt;strong>主库的 runID&lt;/strong> 和&lt;strong>复制进度 offset&lt;/strong> 两个参数。&lt;/li>
&lt;li>主库收到 psync 命令后，会用 FULLRESYNC 响应命令带上两个参数：主库 runID 和主库目前的复制进度 offset。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在第二阶段，&lt;strong>主库将所有数据同步给从库。从库收到数据后，在本地完成数据加载&lt;/strong>。
&lt;ul>
&lt;li>主库执行 bgsave 命令，生成 RDB 文件，接着将文件发给从库。从库接收到 RDB 文件后，会先清空当前数据库，然后加载 RDB 文件。&lt;/li>
&lt;li>在主库将数据同步给从库的过程中，主库不会被阻塞，仍然可以正常接收请求，主库会在内存中用专门的 replication buffer，记录 RDB 文件生成后收到的所有写操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第三个阶段将刚才执行过程中新收到的写命令，再发送给从库。&lt;/li>
&lt;/ul>
&lt;p>之后主从之间会维护一个网络连接，主库会通过这个连接将后续陆续收到的命令操作再同步给从库，这个过程也称为&lt;strong>基于长连接的命令传播&lt;/strong>，可以避免频繁建立连接的开销。&lt;/p>
&lt;p>&lt;img src="./assets/%e4%b8%bb%e4%bb%8e%e7%ac%ac%e4%b8%80%e6%ac%a1%e5%90%8c%e6%ad%a5%e7%9a%84%e6%b5%81%e7%a8%8b.webp"
loading="lazy"
alt="主从第一次同步的流程"
>&lt;/p>
&lt;h3 id="3-如何分担全量复制的主库压力">3. 如何分担全量复制的主库压力
&lt;/h3>&lt;p>如果从库数量很多，而且都要和主库进行全量复制的话，就会导致主库忙于 fork 子进程生成 RDB 文件，进行数据全量同步。fork 这个操作会阻塞主线程处理正常请求，从而导致主库响应应用程序的请求速度变慢。此外，传输 RDB 文件也会占用主库的网络带宽，同样会给主库的资源使用带来压力。&lt;/p>
&lt;p>&lt;strong>通过“主 - 从 - 从”模式将主库生成 RDB 和传输 RDB 的压力，以级联的方式分散到从库上&lt;/strong>。&lt;/p>
&lt;p>具体来说：在部署主从集群的时候，可以手动选择一个从库（比如选择内存资源配置较高的从库），用于级联其他的从库。&lt;/p>
&lt;p>&lt;img src="./assets/%e7%ba%a7%e8%81%94%e7%9a%84%e2%80%9c%e4%b8%bb-%e4%bb%8e-%e4%bb%8e%e2%80%9d%e6%a8%a1%e5%bc%8f.webp"
loading="lazy"
alt="级联的“主-从-从”模式"
>&lt;/p>
&lt;h3 id="4-网路断连了从库恢复后怎么保证一致性">4. 网路断连了，从库恢复后怎么保证一致性？
&lt;/h3>&lt;p>网络断了之后，主从库会采用增量复制的方式继续同步。增量复制只会把主从库网络断连期间主库收到的命令，同步给从库。&lt;/p>
&lt;p>具体而言：当主从库断连后，主库会把断连期间收到的写操作命令，写入 repl_backlog_buffer 这个缓冲区。repl_backlog_buffer 是一个环形缓冲区，&lt;strong>主库会记录自己写到的位置，从库则会记录自己已经读到的位置&lt;/strong>。对主库来说，对应的偏移量就是 master_repl_offset。主库接收的新写操作越多，这个值就会越大。当从库复制完命令后，从库已复制的偏移量 slave_repl_offset 也在不断增加。&lt;/p>
&lt;p>主从库的连接恢复之后，从库首先会给主库发送 psync 命令，并把自己当前的 slave_repl_offset 发给主库，主库会判断自己的 master_repl_offset 和 slave_repl_offset 之间的差距。主库只用把 master_repl_offset 和 slave_repl_offset 之间的命令操作同步给从库就行。&lt;/p>
&lt;p>存在的问题：因为 repl_backlog_buffer 是一个环形缓冲区，所以在缓冲区写满后，主库会继续写入，此时，就会覆盖掉之前写入的操作。&lt;strong>如果从库的读取速度比较慢，就有可能导致从库还未读取的操作被主库新写的操作覆盖了，这会导致主从库间的数据不一致&lt;/strong>。&lt;/p>
&lt;p>为了避免该问题，将缓冲空间调大。&lt;/p>
&lt;h3 id="5-为什么主从库间的复制不使用-aof-呢">5. 为什么主从库间的复制不使用 AOF 呢？
&lt;/h3>&lt;p>AOF文件记录的是每一次写操作的命令，写操作越多文件会变得很大，其中还包括很多对同一个key的多次冗余操作。RDB文件内容是经过压缩的二进制数据（不同数据类型数据做了针对性优化），文件很小。&lt;/p>
&lt;p>从库在加载文件时候，读取RDB文件速度较快，AOF需要依次重放每个写命令，这个过程会经历冗长的处理逻辑，恢复速度相比RDB会慢得多。&lt;/p>
&lt;h3 id="6如果主库挂了应该怎么办">6.如果主库挂了，应该怎么办？
&lt;/h3>&lt;p>依赖&lt;strong>哨兵（Sentinel）机制&lt;/strong>，哨兵其实就是一个运行在特殊模式下的 Redis 进程，它的作用是实现&lt;strong>主从节点故障转移&lt;/strong>。它会监测主节点是否存活，如果发现主节点挂了，它就会选举一个从节点切换为主节点，并且把新主节点的相关信息通知给从节点和客户端。&lt;/p>
&lt;h3 id="7哨兵机制如何判断主从库处于下线状态">7.哨兵机制，如何判断主从库处于下线状态
&lt;/h3>&lt;p>主观下线：&lt;strong>哨兵进程会使用 PING 命令检测它自己和主、从库的网络连接情况，用来判断实例的状态&lt;/strong>。如果哨兵发现主库或从库对 PING 命令的响应超时了，那么，哨兵就会先把它标记为“主观下线”。&lt;/p>
&lt;p>客观下线：当有 N 个哨兵实例时，最好要有 N/2 + 1 个实例判断主库为“主观下线”，才能最终判定主库为“客观下线”。&lt;/p>
&lt;p>对从库标记为主观下线，一般影响不大，集群的对外服务不会间断，但是对于主库则不能简单的标记为主观下线，因为有可能「主节点」其实并没有故障，可能只是因为主节点的系统压力比较大或者网络发送了拥塞，导致主节点没有在规定时间内响应哨兵的 PING 命令，同时哨兵误判了，其实主库并没有故障。可是，一旦启动了主从切换，后续的选主和通知操作都会带来额外的计算和通信开销。&lt;/p>
&lt;p>为了减少误判的情况，则对主库采用客观下线，用多个节点部署成&lt;strong>哨兵集群&lt;/strong>（&lt;em>最少需要三台机器来部署哨兵集群&lt;/em>），&lt;strong>通过多个哨兵节点一起判断，就可以就可以避免单个哨兵因为自身网络状况不好，而误判主节点下线的情况&lt;/strong>。同时，多个哨兵的网络同时不稳定的概率较小，由它们一起做决策，误判率也能降低。&lt;/p>
&lt;h3 id="8-哨兵机制如何选择从库作为主库">8. 哨兵机制，如何选择从库作为主库
&lt;/h3>&lt;p>在多个从库中，先按照&lt;strong>一定的筛选条件&lt;/strong>，把不符合条件的从库去掉。然后，再按照&lt;strong>一定的规则&lt;/strong>，给剩下的从库逐个打分，将得分最高的从库选为新主库，&lt;/p>
&lt;p>筛选条件：&lt;/p>
&lt;p>&lt;strong>要检查从库的当前在线状态，还要判断它之前的网络连接状态&lt;/strong>。&lt;/p>
&lt;p>如果在 down-after-milliseconds 毫秒（主从断连的最大连接超时时间）内，主从节点都没有通过网络联系上，我们就可以认为主从节点断连了。如果发生断连的次数超过了 10 次，就说明这个从库的网络状况不好，不适合作为新主库。&lt;/p>
&lt;p>打分规则：&lt;/p>
&lt;p>分别是&lt;strong>从库优先级、从库复制进度以及从库 ID 号&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>第一轮：优先级最高的从库得分高。&lt;/strong>&lt;/p>
&lt;p>用户可以通过 slave-priority 配置项，给不同的从库设置不同优先级。例如根据内存大小设置不一样的优先级。&lt;/p>
&lt;p>&lt;strong>第二轮：和旧主库同步程度最接近的从库得分高。&lt;/strong>&lt;/p>
&lt;p>如果在所有从库中，有从库的 slave_repl_offset 最接近 master_repl_offset，那么它的得分就最高，可以作为新主库。&lt;/p>
&lt;p>&lt;strong>第三轮：ID 号小的从库得分高。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>在优先级和复制进度都相同的情况下，ID 号最小的从库得分最高，会被选为新主库&lt;/strong>。&lt;/p>
&lt;p>总结：首先，哨兵会按照在线状态、网络状态，筛选过滤掉一部分不符合要求的从库，然后，依次按照优先级、复制进度、ID 号大小再对剩余的从库进行打分，只要有得分最高的从库出现，就把它选为新主库。&lt;/p>
&lt;h3 id="9-哨兵集群是如何组成的如何与主从库建立连接">9. 哨兵集群是如何组成的，如何与主从库建立连接？
&lt;/h3>&lt;p>哨兵实例之间可以相互发现，主要依赖于 Redis 提供的 pub/sub 机制，也就是发布 / 订阅机制。&lt;/p>
&lt;p>哨兵只要和主库建立起了连接，就可以在主库上发布消息了，比如说发布它自己的连接信息（IP 和端口）。同时，它也可以从主库上订阅消息，获得其他哨兵发布的连接信息。当多个哨兵实例都在主库上做了发布和订阅操作后，它们之间就能知道彼此的 IP 地址和端口。&lt;/p>
&lt;p>在主从集群中，主库上有一个名为“&lt;strong>sentinel&lt;/strong>:hello”的频道，不同哨兵就是通过它来相互发现，实现互相通信的。&lt;/p>
&lt;p>与从库的连接，是由哨兵向主库发送 INFO 命令来完成的，主库接受到这个命令后，就会把从库列表返回给哨兵。接着，哨兵就可以根据从库列表中的连接信息，和每个从库建立连接，并在这个连接上持续地对从库进行监控。&lt;/p>
&lt;h3 id="10-有哪个哨兵来作为领导者执行主从切换">10. 有哪个哨兵来作为领导者，执行主从切换？
&lt;/h3>&lt;p>选举 leader 的过程其实是一个投票的过程，哪个哨兵节点判断主节点为「客观下线」，这个哨兵节点就是候选者。候选者会向其他哨兵发送命令，表明希望成为 Leader 来执行主从切换，并让所有其他哨兵对它进行投票。&lt;/p>
&lt;p>每个哨兵只有一次投票机会，如果用完后就不能参与投票了，可以投给自己或投给别人，但是只有候选者才能把票投给自己。&lt;/p>
&lt;p>那么在投票过程中，任何一个「候选者」，要满足两个条件：&lt;/p>
&lt;ul>
&lt;li>第一，拿到半数以上的赞成票；&lt;/li>
&lt;li>第二，拿到的票数同时还需要大于等于哨兵配置文件中的 quorum 值。&lt;/li>
&lt;/ul>
&lt;h3 id="11-redis-1-主-4-从5-个哨兵-quorum-设置为-2如果-3-个哨兵故障当主节点宕机时哨兵能否判断主节点客观下线主从能否自动切换">11. Redis 1 主 4 从，5 个哨兵 ，quorum 设置为 2，如果 3 个哨兵故障，当主节点宕机时，哨兵能否判断主节点“客观下线”？主从能否自动切换？
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>哨兵集群可以判定主库“主观下线”&lt;/strong>。由于quorum=2，所以当一个哨兵判断主库“主观下线”后，询问另外一个哨兵后也会得到同样的结果，2个哨兵都判定“主观下线”，达到了quorum的值，因此，哨兵集群可以判定主库为“客观下线”。&lt;/li>
&lt;li>&lt;strong>但哨兵不能完成主从切换&lt;/strong>。哨兵标记主库“客观下线后”，在选举“哨兵领导者”时，一个哨兵必须拿到超过多数的选票(5/2+1=3票)。但目前只有2个哨兵活着，无论怎么投票，一个哨兵最多只能拿到2票，永远无法达到多数选票的结果。&lt;/li>
&lt;/ul>
&lt;h3 id="12-如果要用-redis-保存-5000-万个键值对每个键值对大约是-512b会有什么问题怎么解决">12. 如果要用 Redis 保存 5000 万个键值对，每个键值对大约是 512B，会有什么问题？怎么解决？
&lt;/h3>&lt;p>为了保存大量数据，会采用两种方法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>纵向扩展&lt;/strong>：升级单个 Redis 实例的资源配置，包括增加内存容量、增加磁盘容量、使用更高配置的 CPU。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>横向扩展&lt;/strong>：横向增加当前 Redis 实例的个数，就是采用&lt;strong>切片集群&lt;/strong>，也叫分片集群，就是指启动多个 Redis 实例组成一个集群，然后按照一定的规则，把收到的数据划分成多份，每一份用一个实例来保存。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>纵向扩展的好处是，&lt;strong>实施起来简单、直接&lt;/strong>。&lt;/p>
&lt;p>存在两个问题：&lt;/p>
&lt;ul>
&lt;li>在使用 RDB 进行持久化时，Redis 会 fork 子进程来完成，fork 操作的用时和 Redis 的数据量是正相关的，而 fork 在执行时会阻塞主线程。数据量越大，fork 操作造成的主线程阻塞的时间越长。&lt;/li>
&lt;li>纵向扩展会受到硬件和成本的限制。&lt;/li>
&lt;/ul>
&lt;h3 id="13数据切片多个实例如何分布">13.数据切片，多个实例如何分布？
&lt;/h3>&lt;p>Redis Cluster 方案采用哈希槽（Hash Slot），来处理数据和节点之间的映射关系。在 Redis Cluster 方案中，&lt;strong>一个切片集群共有 16384 个哈希槽&lt;/strong>，这些哈希槽类似于数据分区，每个键值对都会根据它的 key，被映射到一个哈希槽中，具体执行过程分为两大步：&lt;/p>
&lt;ul>
&lt;li>根据键值对的 key，按照 &lt;a class="link" href="https://en.wikipedia.org/wiki/Cyclic_redundancy_check" target="_blank" rel="noopener"
>CRC16 算法 (opens new window)&lt;/a>计算一个 16 bit 的值。&lt;/li>
&lt;li>再用 16bit 值对 16384 取模，得到 0~16383 范围内的模数，每个模数代表一个相应编号的哈希槽。&lt;/li>
&lt;/ul>
&lt;p>至于哈希槽如何被映射到对应的实例中，一般有两种方案：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>平均分配：&lt;/strong> 在使用 cluster create 命令创建 Redis 集群时，Redis 会自动把所有哈希槽平均分布到集群节点上。比如集群中有 9 个节点，则每个节点上槽的个数为 16384/9 个。&lt;/li>
&lt;li>&lt;strong>手动分配：&lt;/strong> 可以使用 cluster meet 命令手动建立节点间的连接，组成集群，再使用 cluster addslots 命令，指定每个节点上的哈希槽个数。&lt;/li>
&lt;/ul>
&lt;p>注意：在手动分配哈希槽时，需要把 16384 个槽都分配完，否则 Redis 集群无法正常工作。&lt;/p>
&lt;h3 id="14-客户端怎么准确找到那个访问数据的对应的实例">14. 客户端怎么准确找到那个访问数据的对应的实例？
&lt;/h3>&lt;p>Redis 实例会把自己的哈希槽信息发给和它相连接的其它实例，来完成哈希槽分配信息的扩散。当实例之间相互连接后，每个实例就有所有哈希槽的映射关系了。客户端收到哈希槽信息后，会把哈希槽信息缓存在本地。当客户端请求键值对时，会先计算键所对应的哈希槽，然后就可以给相应的实例发送请求了。&lt;/p>
&lt;h3 id="15如果哈希槽与实例的对应关系发生了变化又如何找到">15.如果哈希槽与实例的对应关系发生了变化，又如何找到？
&lt;/h3>&lt;p>最常见的变化有两个：&lt;/p>
&lt;ul>
&lt;li>在集群中，实例有新增或删除，Redis 需要重新分配哈希槽；&lt;/li>
&lt;li>为了负载均衡，Redis 需要把哈希槽在所有实例上重新分布一遍。&lt;/li>
&lt;/ul>
&lt;p>Redis Cluster 方案提供了一种**重定向机制，**所谓的“重定向”，就是指，客户端给一个原实例发送数据读写操作时，这个实例上并没有相应的数据，这个实例就会给客户端返回MOVED 命令包含新实例的访问地址，客户端要再给一个新实例发送操作命令。&lt;/p>
&lt;h3 id="16-假设在迁移的过程中某个哈希槽迁移了部分数据这时候客户端访问会发生什么">16. 假设在迁移的过程中，某个哈希槽迁移了部分数据，这时候客户端访问会发生什么？
&lt;/h3>&lt;p>在这种迁移部分完成的情况下，客户端就会收到一条 ASK 报错信息， ASK 命令就表示，客户端请求的键值对所在的哈希槽在新的实例上，但是这个哈希槽正在迁移。此时，客户端需要先给新的实例发送一个 ASKING 命令。这个命令的意思是，让这个实例允许执行客户端接下来发送的命令。然后，客户端再向这个实例发送 GET 命令，以读取数据。&lt;/p>
&lt;p>注意：&lt;strong>ASK 命令并不会更新客户端缓存的哈希槽分配信息&lt;/strong>。&lt;/p>
&lt;h3 id="17-为什么-redis-不直接用一个表把键值对和实例的对应关系记录下来">17. 为什么 Redis 不直接用一个表，把键值对和实例的对应关系记录下来？
&lt;/h3>&lt;ul>
&lt;li>表存储空间大：整个集群存储key的数量是无法预估的，key的数量非常多时，直接记录每个key对应的实例映射关系，这个映射表会非常庞大。&lt;/li>
&lt;li>维护表成本高：当集群在扩容、缩容、数据均衡时，节点之间会发生数据迁移，迁移时需要修改每个key的映射关系，维护成本高。如果是单线程操作表，那么所有操作都要串行执行，性能慢；如果是多线程操作表，就涉及到加锁开销。&lt;/li>
&lt;/ul>
&lt;p>哈希槽可以把数据和节点解耦，key通过Hash计算，只需要关心映射到了哪个哈希槽，然后再通过哈希槽和节点的映射表找到节点，相当于消耗了很少的CPU资源，不但让数据分布更均匀，还可以让这个映射表变得很小，利于客户端和服务端保存，节点之间交换信息时也变得轻量。&lt;/p>
&lt;h3 id="redis会出现脑裂的问题吗如何去解决">redis会出现脑裂的问题吗？如何去解决？
&lt;/h3>&lt;p>脑裂，就是指在主从集群中，同时有两个主节点，它们都能接收写请求。客户端不知道应该往哪个主节点写入数据，结果就是不同的客户端会往不同的主节点上写入数据，脑裂会可能&lt;strong>导致数据丢失和数据不一致&lt;/strong>。&lt;/p>
&lt;p>发生的原因：主库是由于某些原因无法处理请求，也没有响应哨兵的心跳，才被哨兵&lt;strong>错误地判断为客观下线&lt;/strong>的。结果，在被判断下线之后，原主库又重新开始处理请求了，而此时，&lt;strong>哨兵还没有完成主从切换&lt;/strong>，客户端仍然可以和原主库通信，客户端发送的写操作就会在原主库上写入数据了，同时从库升级成主库，就出现脑裂的情况。&lt;/p>
&lt;p>造成数据丢失原因：&lt;/p>
&lt;ul>
&lt;li>主从切换后哨兵就会让&lt;strong>原主库执行 slave of 命令&lt;/strong>，和新主库重新进行全量同步。原主库需要&lt;strong>清空本地的数据&lt;/strong>，加载新主库发送的 RDB 文件，这样一来，原主库在主从切换期间保存的新写数据就丢失了。&lt;/li>
&lt;/ul>
&lt;p>解决方案：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>min-slaves-to-write：这个配置项设置了主库能进行数据同步的最少从库数量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>min-slaves-max-lag：这个配置项设置了主从库间进行数据复制时，从库给主库发送 ACK 消息的最大延迟（以秒为单位）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>举个例子：当 &lt;code>min-slaves-to-write&lt;/code> 设置为 2，&lt;code>min-slaves-max-lag&lt;/code> 设置为 10 秒时，&lt;strong>主节点只有在至少有 2 个从节点延迟不超过 10 秒的情况下才会接受写操作&lt;/strong>。&lt;/p>
&lt;h2 id="功能">功能
&lt;/h2>&lt;h3 id="如何保存时间序列数据">如何保存时间序列数据
&lt;/h3>&lt;p>时间序列数据特点：&lt;/p>
&lt;ul>
&lt;li>写：插入数据快&lt;/li>
&lt;li>读：对单条记录的查询以及对某个时间范围内的数据的查询，同时对某个时间范围内的数据做聚合计算等等。&lt;/li>
&lt;/ul>
&lt;p>方案一：Hash 和 Sorted Set 组合&lt;/p>
&lt;p>关于 Hash 类型，可以实现对单键的快速查询，可以把时间戳作为 Hash 集合的 key，把记录的设备状态值作为 Hash 集合的 value。&lt;/p>
&lt;p>**Hash 类型有个短板：它并不支持对数据进行范围查询。**为了能同时支持按时间戳范围的查询，可以用 Sorted Set 来保存时间序列数据，因为它能够根据元素的权重分数来排序。我们可以把时间戳作为 Sorted Set 集合的元素分数，把时间点上记录的数据作为元素本身。&lt;/p>
&lt;p>存在问题：&lt;/p>
&lt;ul>
&lt;li>member重复问题&lt;/li>
&lt;li>Sorted Set 只支持范围查询，无法直接进行聚合计算，所以，我们只能先把时间范围内的数据取回到客户端，然后在客户端自行完成聚合计算。导致大量数据在 Redis 实例和客户端间频繁传输，这会和其他操作命令竞争网络资源，导致其他操作变慢。&lt;/li>
&lt;li>所有的数据会在两个数据类型中各保存一份，内存开销高。&lt;/li>
&lt;/ul>
&lt;p>方案二：RedisTimeSeries&lt;/p>
&lt;p>RedisTimeSeries 是 Redis 的一个扩展模块。它专门面向时间序列数据提供了数据类型和访问接口，并且支持在 Redis 实例上直接对数据进行按时间范围的聚合计算。&lt;/p>
&lt;p>优缺点：&lt;/p>
&lt;ul>
&lt;li>RedisTimeSeries 能支持直接在 Redis 实例上进行多种数据聚合计算，避免了大量数据在实例和客户端间传输。&lt;/li>
&lt;li>不过，RedisTimeSeries 的底层数据结构使用了链表，它的范围查询的复杂度是 O(N) 级别的。&lt;/li>
&lt;li>它的 TS.GET 查询只能返回最新的数据，没有办法像第一种方案的 Hash 类型一样，可以返回任一时间点的数据。&lt;/li>
&lt;/ul>
&lt;h3 id="利用redis如何做消息队列">利用redis如何做消息队列
&lt;/h3>&lt;p>&lt;strong>消息队列在存取消息时，必须要满足三个需求，分别是消息保序、处理重复的消息和保证消息可靠性。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>基于List的消息队列解决方案&lt;/p>
&lt;/blockquote>
&lt;p>消息保序：生产者可以使用 LPUSH 命令把要发送的消息依次写入 List，而消费者则可以使用 BRPOP 命令，从 List 的另一端按照消息的写入顺序，依次读取消息并进行处理。BRPOP 命令也称为阻塞式读取，客户端在没有读到队列数据时，自动阻塞，直到有新的数据写入队列，再开始读取新数据。&lt;/p>
&lt;p>去重：用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID。&lt;/p>
&lt;p>保证可靠性：List 类型提供了 BRPOPLPUSH 命令，这个命令的作用是让消费者程序从一个 List 中读取消息，同时，Redis 会把这个消息再插入到另一个 List（可以叫作备份 List）留存。消费者程序读了消息但没能正常处理，等它重启后，就可以从备份 List 中重新读取消息并进行处理了。&lt;/p>
&lt;p>存在的问题：**List 类型并不支持消费组的实现：**生产者消息发送很快，而消费者处理消息的速度比较慢，这就导致 List 中的消息越积越多，给 Redis 的内存带来很大压力。&lt;/p>
&lt;blockquote>
&lt;p>基于 Streams 的消息队列解决方案&lt;/p>
&lt;/blockquote>
&lt;p>Streams 是 Redis 专门为消息队列设计的数据类型，它提供了丰富的消息队列操作命令。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>XADD：插入消息，保证有序，可以自动生成全局唯一 ID；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>XREAD：用于读取消息，可以按 ID 读取数据；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>XREADGROUP：按消费组形式读取消息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>XPENDING：XPENDING 命令可以用来查询每个消费组内所有消费者已读取但尚未确认的消息&lt;/p>
&lt;/li>
&lt;li>
&lt;p>XACK：XACK 命令用于向消息队列确认消息处理已完成。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e6%96%b9%e6%a1%88.webp"
loading="lazy"
alt="消息队列方案"
>&lt;/p>
&lt;h3 id="redis缓存的淘汰策略">Redis缓存的淘汰策略
&lt;/h3>&lt;p>Redis 内存淘汰策略共有八种，这八种策略大体分为「不进行数据淘汰」和「进行数据淘汰」两类策略。&lt;/p>
&lt;ol>
&lt;li>不进行数据淘汰策略&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>noeviction&lt;/strong>（Redis3.0之后，默认） ：它表示当运行内存超过最大设置内存时，&lt;strong>不淘汰任何数据&lt;/strong>，这时如果有新的数据写入，会&lt;strong>报错通知禁止写入&lt;/strong>，不淘汰任何数据。&lt;/p>
&lt;ol start="2">
&lt;li>进行数据淘汰策略&lt;/li>
&lt;/ol>
&lt;p>在设置了过期时间的数据中进行淘汰：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>volatile-random&lt;/strong>：随机淘汰设置了过期时间的任意键值；&lt;/li>
&lt;li>&lt;strong>volatile-ttl&lt;/strong>：优先淘汰更早过期的键值。&lt;/li>
&lt;li>&lt;strong>volatile-lru&lt;/strong>（Redis3.0 之前，默认的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最久未使用的键值；&lt;/li>
&lt;li>&lt;strong>volatile-lfu&lt;/strong>（Redis 4.0 后新增的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最少使用的键值；&lt;/li>
&lt;/ul>
&lt;p>在所有数据范围内进行淘汰：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>allkeys-random&lt;/strong>：随机淘汰任意键值;&lt;/li>
&lt;li>&lt;strong>allkeys-lru&lt;/strong>：淘汰整个键值中最久未使用的键值；&lt;/li>
&lt;li>&lt;strong>allkeys-lfu&lt;/strong>（Redis 4.0 后新增的内存淘汰策略）：淘汰整个键值中最少使用的键值。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/%e5%86%85%e5%ad%98%e6%b7%98%e6%b1%b0%e7%ad%96%e7%95%a5.webp"
loading="lazy"
alt="内存淘汰策略"
>&lt;/p>
&lt;h4 id="lru算法">LRU算法
&lt;/h4>&lt;p>&lt;strong>LRU&lt;/strong> 全称是 Least Recently Used 翻译为&lt;strong>最近最少使用&lt;/strong>，会选择淘汰最近最少使用的数据。&lt;/p>
&lt;p>传统 LRU 算法的实现是基于「链表」结构，链表中的元素按照操作顺序从前往后排列，最新操作的键会被移动到表头，当需要内存淘汰时，只需要删除链表尾部的元素即可，因为链表尾部的元素就代表最久未被使用的元素。&lt;/p>
&lt;p>存在问题：&lt;/p>
&lt;ul>
&lt;li>需要用链表管理所有的缓存数据，这会带来额外的空间开销；&lt;/li>
&lt;li>当有数据被访问时，需要在链表上把该数据移动到头端，如果有大量数据被访问，就会带来很多链表移动操作，会很耗时，进而会降低 Redis 缓存性能。&lt;/li>
&lt;/ul>
&lt;p>Redis 实现的是一种&lt;strong>近似 LRU 算法&lt;/strong>，目的是为了更好的节约内存，它的&lt;strong>实现方式是在 Redis 的对象结构体中添加一个额外的字段，用于记录此数据的最后一次访问时间&lt;/strong>。Redis 在决定淘汰的数据时，根据数据范围会&lt;strong>随机选出 N 个数据&lt;/strong>，把它们作为一个候选集合。然后&lt;strong>淘汰最久没有使用的那个&lt;/strong>。&lt;/p>
&lt;p>Redis 实现的 LRU 算法的优点：&lt;/p>
&lt;ul>
&lt;li>不用为所有的数据维护一个大链表，节省了空间占用；&lt;/li>
&lt;li>不用在每次数据访问时都移动链表项，提升了缓存的性能；&lt;/li>
&lt;/ul>
&lt;p>但是 LRU 算法有一个问题，&lt;strong>无法解决缓存污染问题&lt;/strong>，比如应用一次读取了大量的数据，而这些数据只会被读取这一次，那么这些数据会留存在 Redis 缓存中很长一段时间，造成缓存污染。&lt;/p>
&lt;h4 id="lfu">LFU
&lt;/h4>&lt;p>LFU 全称是 Least Frequently Used 翻译为&lt;strong>最近最不常用&lt;/strong>，LFU 算法是根据数据访问次数来淘汰数据的，它的核心思想是“如果数据过去被访问多次，那么将来被访问的频率也更高”。&lt;/p>
&lt;p>&lt;strong>在 LFU 算法中&lt;/strong>，Redis对象头的 24 bits 的 lru 字段被分成两段来存储，高 16bit 存储 ldt(Last Decrement Time)，低 8bit 存储 logc(Logistic Counter)。&lt;/p>
&lt;p>LFU 策略设计使用非线性增长的计数器来表示数据的访问次数，为了避开 8bit 最大只能记录 255 的限制。如果counter值越大，递增概率越低&lt;/p>
&lt;p>设计了一个 logc(Logistic Counter)值的衰减机制:对于当前时间与上一次访问的时间差距（分钟为单位）乘以一个衰减速度(lfu-decay-time)，得到衰减值。默认值为1，lfu-decay-time 值越大，衰减越慢；&lt;/p>
&lt;h3 id="redis缓存的过期删除策略">Redis缓存的过期删除策略
&lt;/h3>&lt;p>设置过期时间：&lt;/p>
&lt;ul>
&lt;li>&lt;code>expire &amp;lt;key&amp;gt; &amp;lt;n&amp;gt;&lt;/code>：设置 key 在 n 秒后过期，比如 expire key 100 表示设置 key 在 100 秒后过期；&lt;/li>
&lt;li>&lt;code>pexpire &amp;lt;key&amp;gt; &amp;lt;n&amp;gt;&lt;/code>：设置 key 在 n 毫秒后过期，比如 pexpire key2 100000 表示设置 key2 在 100000 毫秒（100 秒）后过期。&lt;/li>
&lt;li>&lt;code>expireat &amp;lt;key&amp;gt; &amp;lt;n&amp;gt;&lt;/code>：设置 key 在某个时间戳（精确到秒）之后过期，比如 expireat key3 1655654400 表示 key3 在时间戳 1655654400 后过期（精确到秒）；&lt;/li>
&lt;li>&lt;code>pexpireat &amp;lt;key&amp;gt; &amp;lt;n&amp;gt;&lt;/code>：设置 key 在某个时间戳（精确到毫秒）之后过期，比如 pexpireat key4 1655654400000 表示 key4 在时间戳 1655654400000 后过期（精确到毫秒）&lt;/li>
&lt;/ul>
&lt;p>定时删除策略的做法是，&lt;strong>在设置 key 的过期时间时，同时创建一个定时事件，当时间到达时，由事件处理器自动执行 key 的删除操作。&lt;/strong>&lt;/p>
&lt;p>优点：可以保证过期key尽快被删除；&lt;/p>
&lt;p>缺点：容易在极端情况，造成cpu紧张；&lt;/p>
&lt;p>惰性删除策略的做法是，&lt;strong>不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。&lt;/strong>&lt;/p>
&lt;p>优点：对cpu友好；&lt;/p>
&lt;p>缺点：容易造成一定的空间浪费；&lt;/p>
&lt;p>定期删除策略的做法是，&lt;strong>每隔一段时间「随机」从数据库中取出一定数量的 key 进行检查，并删除其中的过期key。&lt;/strong>&lt;/p>
&lt;p>优点：折中；&lt;/p>
&lt;p>缺点：需要控制删除操作时长和频率；&lt;/p>
&lt;p>&lt;strong>Redis 选择「惰性删除+定期删除」这两种策略配和使用&lt;/strong>，以求在合理使用 CPU 时间和避免内存浪费之间取得平衡。&lt;/p>
&lt;p>具体实现：&lt;/p>
&lt;p>详细说说 Redis 的定期删除的流程：&lt;/p>
&lt;ol>
&lt;li>在 Redis 中，默认每秒进行 10 次过期检查一次数据库&lt;/li>
&lt;li>从过期字典中随机抽取 20 个 key；&lt;/li>
&lt;li>检查这 20 个 key 是否过期，并删除已过期的 key；&lt;/li>
&lt;li>如果本轮检查的已过期 key 的数量，超过 5 个（20/4），也就是「已过期 key 的数量」占比「随机抽取 key 的数量」大于 25%，则继续重复步骤 1；如果已过期的 key 比例小于 25%，则停止继续删除过期 key，然后等待下一轮再检查。&lt;/li>
&lt;/ol>
&lt;h3 id="分布式锁的实现">分布式锁的实现
&lt;/h3>&lt;p>基于 Redis 节点实现分布式锁时，对于加锁操作，我们需要满足三个条件。&lt;/p>
&lt;ul>
&lt;li>加锁包括了读取锁变量、检查锁变量值和设置锁变量值三个操作，但需要以原子操作的方式完成，所以，我们使用 SET 命令带上 NX 选项来实现加锁，实现「key不存在才插入」；&lt;/li>
&lt;li>锁变量需要设置过期时间，以免客户端拿到锁后发生异常，导致锁一直无法释放，所以，我们在 SET 命令执行时加上 EX/PX 选项，设置其过期时间；&lt;/li>
&lt;li>锁变量的值需要能区分来自不同客户端的加锁操作，以免在释放锁时，出现误释放操作，所以，我们使用 SET 命令设置锁变量值时，每个客户端设置的值是一个唯一值，用于标识客户端；&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">SET lock_key unique_value NX PX &lt;span class="m">10000&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>lock_key 就是 key 键；&lt;/li>
&lt;li>unique_value 是客户端生成的唯一的标识，区分来自不同客户端的锁操作；&lt;/li>
&lt;li>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；&lt;/li>
&lt;li>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。&lt;/li>
&lt;/ul>
&lt;p>对于解锁：&lt;/p>
&lt;p>解锁的过程就是将 lock_key 键删除（del lock_key），但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除。这个过程需要 Lua 脚本来保证解锁的原子性；&lt;/p>
&lt;p>优缺点：&lt;/p>
&lt;ul>
&lt;li>具有性能高效、实现简单等优点。&lt;/li>
&lt;li>超时时间不好设置。设置过短，保护不了共享资源（例如业务没有执行完）。
&lt;ul>
&lt;li>解决方案：租约机制。写一个守护线程，然后去判断锁的情况，当锁快失效的时候，再次进行续约加锁，当主线程执行完成后，销毁续约锁即可。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redis在主从模型下，分布式锁不可靠。**Redis 主从复制模式中的数据是异步复制的，**在 Redis 主节点获取到锁后，在没有同步到其他节点时，Redis 主节点宕机了，此时新的 Redis 主节点依然可以获取锁。&lt;/li>
&lt;/ul>
&lt;p>为了&lt;strong>保证集群环境下分布式锁的可靠性&lt;/strong>，Redis 官方已经设计了一个分布式锁算法 &lt;strong>Redlock（红锁）&lt;/strong>。&lt;/p>
&lt;p>Redlock 算法的基本思路，&lt;strong>是让客户端和多个独立的 Redis 节点依次请求申请加锁，如果客户端能够和半数以上的节点成功地完成加锁操作并且总耗时没有超过锁的有效时间，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败&lt;/strong>。&lt;/p>
&lt;p>Redlock 算法加锁三个过程：&lt;/p>
&lt;ul>
&lt;li>第一步是，客户端获取当前时间（t1）。&lt;/li>
&lt;li>第二步是，客户端按顺序依次向 N 个 Redis 节点执行加锁操作：
&lt;ul>
&lt;li>加锁操作使用 SET 命令，带上 NX，EX/PX 选项，以及带上客户端的唯一标识。&lt;/li>
&lt;li>如果某个 Redis 节点发生故障了，为了保证在这种情况下，Redlock 算法能够继续运行，我们需要给「加锁操作」设置一个超时时间（不是对「锁」设置超时时间，而是对**「加锁操作」设置超时时间**），加锁操作的超时时间需要远远地小于锁的过期时间，一般也就是设置为几十毫秒。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第三步是，一旦客户端从超过半数（大于等于 N/2+1）的 Redis 节点上成功获取到了锁，就再次获取当前时间（t2），然后计算计算整个加锁过程的总耗时（t2-t1）。如果 t2-t1 &amp;lt; 锁的过期时间，此时，认为客户端加锁成功，否则认为加锁失败。&lt;/li>
&lt;/ul>
&lt;h3 id="如何实现事务机制">如何实现事务机制
&lt;/h3>&lt;p>Redis 支持事务，通过使用 &lt;code>MULTI&lt;/code>、&lt;code>EXEC&lt;/code>、&lt;code>WATCH&lt;/code> 和 &lt;code>DISCARD&lt;/code> 等命令来实现。事务中的命令会被排队并在调用 &lt;code>EXEC&lt;/code> 时一次性执行，保证了事务的原子性。&lt;/p>
&lt;p>具体实现流程如下：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>开始事务&lt;/strong>：使用 &lt;code>MULTI&lt;/code> 命令开始一个事务，之后的所有命令都会被排队。&lt;/li>
&lt;li>&lt;strong>添加命令&lt;/strong>：在事务中添加命令，这些命令不会立即执行，而是存储在队列中。&lt;/li>
&lt;li>&lt;strong>执行事务&lt;/strong>：使用 &lt;code>EXEC&lt;/code> 命令执行队列中的所有命令，确保原子性。&lt;/li>
&lt;li>&lt;strong>取消事务&lt;/strong>：使用 &lt;code>DISCARD&lt;/code> 命令可以放弃事务，清空命令队列。&lt;/li>
&lt;li>&lt;strong>监视键&lt;/strong>：使用 &lt;code>WATCH&lt;/code> 命令可以监视一个或多个键，如果在事务执行前这些键被修改，则 &lt;code>EXEC&lt;/code> 将不会执行，确保数据一致性。&lt;/li>
&lt;/ol>
&lt;p>注意：redis不支持事务运行时错误的事务回滚。&lt;/p>
&lt;h3 id="秒杀场景redis做了什么">秒杀场景，redis做了什么
&lt;/h3>&lt;p>秒杀场景的负载特征对支撑系统的要求：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>第一个特征是瞬时并发访问量非常高&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>第二个特征是读多写少，而且读操作是简单的查询操作&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>第一阶段是秒杀活动前：用户会不断刷新商品详情页，这会导致详情页的瞬时请求量剧增。这个阶段的应对方案，一般是尽量&lt;strong>把商品详情页的页面元素静态化，然后使用 CDN 或是浏览器把这些静态化的元素缓存起来&lt;/strong>。&lt;/p>
&lt;p>第二阶段是秒杀活动开始。这个阶段的操作就是三个：库存查验、库存扣减和订单处理。当库存查验完成后，一旦库存有余量，我们就立即在 Redis 中扣减库存。然后在数据库中进行订单处理。核心在于：&lt;strong>在库存查验、库存扣减操作中，在redis中保证原子性。&lt;/strong>&lt;/p>
&lt;p>在这一个阶段，还可以使用redis分布式锁来支撑。&lt;/p>
&lt;p>第三阶段就是秒杀活动结束后。这个阶段中的用户请求量已经下降很多了，服务器端一般都能支撑。&lt;/p>
&lt;h2 id="缓存">缓存
&lt;/h2>&lt;h3 id="缓存一致性如何发生以及解决">缓存一致性如何发生以及解决
&lt;/h3>&lt;p>缓存和数据库的同步可以通过以下几种方式:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>先更新缓存，再更新数据库&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先更新数据库存，再更新缓存&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>以上两种会因为&lt;strong>并发问题导致数据不一致&lt;/strong>。&lt;strong>当两个请求并发更新同一条数据的时候，可能会出现缓存和数据库中的数据不一致的现象&lt;/strong>。&lt;/p>
&lt;p>一般的解决方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>加锁&lt;/strong>：在更新缓存前先加个&lt;strong>分布式锁&lt;/strong>，保证同一时间只运行一个请求更新缓存，就会不会产生并发问题了。&lt;/li>
&lt;li>在更新完缓存时，给缓存加上较短的&lt;strong>过期时间&lt;/strong>，不一致出现的时间较短，业务可以接受。（勉强的方案）&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>先删除缓存，再更新数据库，后续等查询把数据库的数据回种到缓存中&lt;/li>
&lt;li>先更新数据库，再删除缓存，后续等查询把数据库的数据回种到缓存中&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./assets/%e7%bc%93%e5%ad%98%e4%b8%8d%e4%b8%80%e8%87%b4.webp"
loading="lazy"
alt="缓存不一致"
>&lt;/p>
&lt;p>延迟双删：更新数据库之前，删除一次缓存；更新完数据库后，再进行一次延迟删除；也只是&lt;strong>尽可能&lt;/strong>保证一致性而已，极端情况下，依然也会出现缓存不一致的现象。&lt;/p>
&lt;p>对于解决存在操作失败的可能的解决方案：&lt;/p>
&lt;p>重试机制：引入&lt;strong>消息队列&lt;/strong>，将&lt;strong>第二个操作要操作的数据&lt;/strong>加入到消息队列，由消费者来操作数据。&lt;/p>
&lt;ul>
&lt;li>如果应用&lt;strong>删除缓存失败&lt;/strong>，可以从消息队列中重新读取数据，然后再次删除缓存，这个就是&lt;strong>重试机制&lt;/strong>。当然，如果重试超过的一定次数，还是没有成功，我们就需要向业务层发送报错信息了。&lt;/li>
&lt;li>如果&lt;strong>删除缓存成功&lt;/strong>，就要把数据从消息队列中移除，避免重复操作，否则就继续重试。&lt;/li>
&lt;/ul>
&lt;p>订阅 MySQL binlog，再操作缓存：&lt;strong>将binlog日志采集发送到MQ队列里面，然后编写一个简单的缓存删除消息者订阅binlog日志，根据更新log删除缓存，并且通过ACK机制确认处理这条更新log，保证数据缓存一致性&lt;/strong>。这里有一个很关键的点，&lt;strong>必须是删除缓存成功，再回 ack 机制给消息队列&lt;/strong>，否则可能会造成消息丢失的问题，所以会加上重试机制。&lt;/p>
&lt;p>以上是方案是尽可能保证缓存和数据库具有一定的一致性。如果希望强一致性：加分布式锁，串行化。&lt;/p>
&lt;h3 id="缓存异常">缓存异常
&lt;/h3>&lt;h4 id="雪崩">雪崩
&lt;/h4>&lt;p>缓存雪崩是指当&lt;strong>大量缓存数据在同一时间过期（失效）或者 Redis 故障宕机&lt;/strong>时，如果此时有大量的用户请求，都无法在 Redis 中处理，于是全部请求都直接访问数据库，从而导致数据库的压力骤增，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃。&lt;/p>
&lt;p>针对大量数据同时过期而引起的问题，解决方案：&lt;/p>
&lt;ol>
&lt;li>微调过期时间：&lt;/li>
&lt;/ol>
&lt;p>在对缓存数据设置过期时间时，&lt;strong>给这些数据的过期时间加上一个随机数&lt;/strong>，这样就保证数据不会在同一时间过期。&lt;/p>
&lt;ol start="2">
&lt;li>服务降级：&lt;/li>
&lt;/ol>
&lt;p>当业务应用访问的是&lt;strong>非核心数据&lt;/strong>（例如电商商品属性）时，暂时停止从缓存中查询这些数据，而是&lt;strong>直接返回预定义信息&lt;/strong>；&lt;/p>
&lt;p>当业务应用访问的是&lt;strong>核心数据&lt;/strong>（例如电商商品库存）时，仍然允许查询缓存，如果缓存缺失，也可以&lt;strong>继续通过数据库读取&lt;/strong>。&lt;/p>
&lt;ol start="3">
&lt;li>使用多级缓存：引入多级缓存机制，如本地缓存和分布式缓存相结合，减少单点故障风险。&lt;/li>
&lt;li>加互斥锁：使得没缓存或缓存失效的情况下，同一时间只有一个请求来构建缓存，防止数据库压力过大。&lt;/li>
&lt;/ol>
&lt;p>针对Redis宕机引起的问题，解决方案：&lt;/p>
&lt;ol>
&lt;li>服务熔断或请求限流机制：&lt;/li>
&lt;/ol>
&lt;p>启动&lt;strong>服务熔断&lt;/strong>机制，&lt;strong>暂停业务应用对缓存服务的访问，直接返回错误&lt;/strong>，不用再继续访问数据库，从而降低对数据库的访问压力，会带来业务无法正常工作问题。&lt;/p>
&lt;p>为了减少对业务的影响，我们可以启用&lt;strong>请求限流&lt;/strong>机制，&lt;strong>只将少部分请求发送到数据库进行处理，再多的请求就在入口直接拒绝服务&lt;/strong>，等到 Redis 恢复正常并把缓存预热完后，再解除请求限流的机制。&lt;/p>
&lt;ol start="2">
&lt;li>构建 Redis 缓存高可靠集群：通过&lt;strong>主从节点的方式构建 Redis 缓存高可靠集群&lt;/strong>。&lt;/li>
&lt;/ol>
&lt;h4 id="击穿">击穿
&lt;/h4>&lt;p>击穿：如果缓存中的&lt;strong>某个热点数据过期&lt;/strong>了，此时大量的请求访问了该热点数据，就无法从缓存中读取，直接访问数据库，数据库很容易就被高并发的请求冲垮。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ul>
&lt;li>热点数据永不过期：不给热点数据设置过期时间，由后台异步更新缓存。&lt;/li>
&lt;li>加互斥锁：使得没缓存或缓存失效的情况下，保证同一时间只有一个请求来构建缓存。&lt;/li>
&lt;/ul>
&lt;h4 id="穿透">穿透
&lt;/h4>&lt;p>穿透是指当用户访问的数据，&lt;strong>既不在缓存中，也不在数据库中&lt;/strong>，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，&lt;strong>没办法构建缓存数据&lt;/strong>，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>防止非法请求：检查非法请求，封禁其 IP 以及账号，防止它再次为非作歹。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缓存空值：将数据库中不存在的结果（例如空值）也缓存起来，并设置一个较短的过期时间，避免频繁查询数据库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用布隆过滤器：使用布隆过滤器来快速判断一个请求的数据是否存在，如果布隆过滤器判断数据不存在，则直接返回，避免查询数据库。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./assets/%e7%bc%93%e5%ad%98%e5%bc%82%e5%b8%b8.webp"
loading="lazy"
alt="缓存异常"
>&lt;/p></description></item><item><title>Mysql-八股题</title><link>https://www.yangdiy.cn/p/mysql/</link><pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate><guid>https://www.yangdiy.cn/p/mysql/</guid><description>&lt;h2 id="mysql-基础架构">MySQL 基础架构
&lt;/h2>&lt;img src="./assets/mysql架构图.png" alt="架构图" style="zoom:33%;" />
&lt;blockquote>
&lt;p>其实图相对重要一些，一些相关题目可以记忆这个图进行回答&lt;/p>
&lt;/blockquote>
&lt;p>Mysql分为Server层和存储引擎层两部分。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>连接器：&lt;/strong> 身份认证和权限相关&lt;/li>
&lt;li>&lt;strong>查询缓存：&lt;/strong> 执行查询语句的时候，会先查询缓存(命中概率低，8.0移除)&lt;/li>
&lt;li>&lt;strong>分析器：&lt;/strong> 进行词法分析和语法分析，检查是否正确以及进行鉴权&lt;/li>
&lt;li>&lt;strong>优化器：&lt;/strong> 决定选择使用最优方案，例如匹配索引，多表关联(join)的连接顺序&lt;/li>
&lt;li>&lt;strong>执行器：&lt;/strong> 执行语句，然后从存储引擎返回数据。 （会对实际运行的表进行鉴权）&lt;/li>
&lt;li>&lt;strong>插件式存储引擎&lt;/strong>：主要负责数据的存储和读取，支持 InnoDB、MyISAM、Memory 等多种存储引擎。&lt;/li>
&lt;/ul>
&lt;h3 id="1-查询语句在mysql-的执行过程">1. 查询语句在Mysql 的执行过程
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tb_student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;18&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39; 张三 &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>连接数据库&lt;/li>
&lt;li>在 MySQL8.0 版本以前，会先查询缓存，以这条 SQL 语句为 key 在内存中查询是否有结果。（在工程实现中，在查询缓存返回结果之前，做权限校验）。&lt;/li>
&lt;li>通过分析器进行词法分析，提取 SQL 语句的关键元素，比如提取上面这个语句是查询 select，提取需要查询的表名为 tb_student，需要查询所有的列，查询条件是这个表的 id=&amp;lsquo;1&amp;rsquo;。然后判断这个 SQL 语句是否有语法错误，比如关键词是否正确等等，如果检查没问题就执行下一步。（注：在词法分析阶段，会进行 precheck 验证权限，判断是否有权限。）&lt;/li>
&lt;li>优化器进行确定执行方案，上面的 SQL 语句，可以有两种执行方案：a.先查询学生表中姓名为“张三”的学生，然后判断是否年龄是 18。b.先找出学生中年龄 18 岁的学生，然后再查询姓名为“张三”的学生。那么优化器根据自己的优化算法进行选择执行效率最好的一个方案（优化器认为，有时候不一定最好）。那么确认了执行计划后就准备开始执行了。&lt;/li>
&lt;li>在执行器过程，会先进行权限校验，然后会调用数据库引擎接口，返回引擎的执行结果。&lt;/li>
&lt;/ol>
&lt;h3 id="2-更新语句在mysql-的执行过程">2. 更新语句在Mysql 的执行过程
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">tb_student&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;19&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39; 张三 &amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>更新语句会沿着查询的流程走，与查询语句不同的是执行更新时候，会记录日志。&lt;/p>
&lt;ol>
&lt;li>执行器会找到目标行数据。如果目标行所在的数据页在内存（Buffer Pool ）中，就会直接返回执行器，否则需要从磁盘读入内存，再返回。&lt;/li>
&lt;li>执行器拿到引擎给的行数据，修改对应字段值，得到新的一行数据，再调用引擎接口写入这行新数据。&lt;/li>
&lt;li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。&lt;/li>
&lt;li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。&lt;/li>
&lt;li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。&lt;/li>
&lt;/ol>
&lt;img src="./assets/update语句执行流程.png" alt="update语句执行流程" style="zoom:25%;" />
&lt;h3 id="5-什么是数据页的空洞如何解决">5. 什么是数据页的空洞，如何解决？
&lt;/h3>&lt;p>在InnoDB引擎中，删除某一行数据，会把这个一行数据标记为删除，表明可以复用。行数据的复用，只限于符合范围条件的数据。当你随机删除过多，会造成一个数据页中存在很多可以复用但是没有被使用的地方，称之为空洞。&lt;/p>
&lt;p>不止是删除数据会造成空洞，插入数据也会。&lt;/p>
&lt;p>当把一个数据页上的所有数据都删除，表明数据页也可以被复用，但是表空间不会回收。&lt;/p>
&lt;p>解决方案：使用Online DDL方式重建表&lt;/p>
&lt;p>重建表的流程：&lt;/p>
&lt;ul>
&lt;li>建立一个临时文件，扫描表 A 主键的所有数据页；&lt;/li>
&lt;li>用数据页中表 A 的记录生成 B+ 树，存储到临时文件中；&lt;/li>
&lt;li>生成临时文件的过程中，将所有对 A 的操作记录在一个日志文件（row log）中；&lt;/li>
&lt;li>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 A 相同的数据文件；&lt;/li>
&lt;li>用临时文件替换表 A 的数据文件。&lt;/li>
&lt;/ul>
&lt;h3 id="6-在-select-count-from-t-这样的查询语句里面countcount主键-idcount字段-和-count1-等不同用法的性能有哪些差别">6. 在 select count(?) from t 这样的查询语句里面，count(*)、count(主键 id)、count(字段) 和 count(1) 等不同用法的性能，有哪些差别。
&lt;/h3>&lt;ul>
&lt;li>count(主键 id) ：InnoDB 引擎会遍历整张表，把每一行的 id 值都取出来，返回给 server 层。server 层拿到 id 后，判断是不可能为空的，就按行累加。&lt;/li>
&lt;li>count(1)：InnoDB 引擎遍历整张表，但不取值。server 层对于返回的每一行，往count函数放一个数字“1”进去，判断是不可能为空的，按行累加。&lt;/li>
&lt;li>count(字段) ：【如果没有索引，走主键索引】
&lt;ul>
&lt;li>如果这个“字段”是定义为 not null 的话，一行行地从记录里面读出这个字段，判断不能为 null，按行累加；&lt;/li>
&lt;li>如果这个“字段”定义允许为 null，那么执行的时候，判断到有可能是 null，还要把值取出来再判断一下，不是 null 才累加。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>count(*)：不需要取值，按行累加。【可能走最小的索引】&lt;/li>
&lt;/ul>
&lt;p>按照效率排序的话，count(字段)&amp;lt;count(主键id)&amp;lt;count(1) ≈ count(*)&lt;/p>
&lt;h3 id="7order-by-中是如何排序的吗">7.order by 中是如何排序的吗？
&lt;/h3>&lt;p>有这样一个sql语句：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">city&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">city&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;杭州&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">order&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">by&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">limit&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">city是索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这个语句执行流程如下所示 ：&lt;/p>
&lt;ul>
&lt;li>初始化 sort_buffer，确定放入 name、city、age 这三个字段；&lt;/li>
&lt;li>从索引 city 找到第一个满足 city=&amp;lsquo;杭州’条件的主键 id，也就是图中的 ID_X；&lt;/li>
&lt;li>到主键 id 索引取出整行，取 name、city、age 三个字段的值，存入 sort_buffer 中；&lt;/li>
&lt;li>从索引 city 取下一个记录的主键 id；&lt;/li>
&lt;li>重复步骤 3、4 直到 city 的值不满足查询条件为止，对应的主键 id 也就是图中的 ID_Y；&lt;/li>
&lt;li>对 sort_buffer 中的数据按照字段 name 做快速排序；按照排序结果取前 1000 行返回给客户端。、&lt;/li>
&lt;/ul>
&lt;p>MySQL 会给每个线程分配一块内存用于排序，称为 sort_buffer。&lt;/p>
&lt;p>也称之为全字段排序（把所需字段全放入 sort_buffer中）。&lt;/p>
&lt;p>&lt;mark>对于 InnoDB 表来说，执行全字段排序会减少磁盘访问，因此会被优先选择。&lt;/mark>&lt;/p>
&lt;h3 id="8-全字段排序有什么性能限制吗">8. 全字段排序有什么性能限制吗？
&lt;/h3>&lt;p>排序，可能在内存中完成，也可能需要使用外部排序，这取决于排序所需的内存和参数 sort_buffer_size。&lt;/p>
&lt;p>排序的数据量小于 sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则需要利用磁盘临时文件辅助排序。&lt;/p>
&lt;p>外部排序一般使用多路归并排序算法。&lt;/p>
&lt;p>如果查询要返回的字段很多的话，那么 sort_buffer 里面要放的字段数太多，这样内存里能够同时放下的行数很少，要分成很多个临时文件，排序的性能会很差。&lt;/p>
&lt;h3 id="9-如何优化全字段排序带来的性能限制">9. 如何优化全字段排序带来的性能限制？
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>增大 &lt;code>sort_buffer_size&lt;/code>：尽量提高内存中的排序缓冲区大小，使得内存能够容纳更多的行，减少生成临时文件的数量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>减少查询中返回的字段数量：查询时只返回必要的字段（使用 &lt;code>SELECT&lt;/code> 时避免 &lt;code>SELECT *&lt;/code>），减少单行数据占用的空间，从而让内存能够存储更多行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构建联合\覆盖索引：让结果是有序的，减少排序过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>让Mysql 采用另一种排序方法：rowId 排序。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="10-rowid-排序是如何执行的">10. rowid 排序是如何执行的？
&lt;/h3>&lt;p>max_length_for_sort_data，是 MySQL 中专门控制用于排序的行数据的长度的一个参数。如果单行的长度超过这个值，MySQL 就认为单行太大，要换一个算法。&lt;/p>
&lt;p>整个执行流程：&lt;/p>
&lt;ul>
&lt;li>初始化 sort_buffer，确定放入两个字段，即 name 和 id；&lt;/li>
&lt;li>从索引 city 找到第一个满足 city=&amp;lsquo;杭州’条件的主键 id，也就是图中的 ID_X；&lt;/li>
&lt;li>到主键 id 索引取出整行，取 name、id 这两个字段，存入 sort_buffer 中；&lt;/li>
&lt;li>从索引 city 取下一个记录的主键 id；&lt;/li>
&lt;li>重复步骤 3、4 直到不满足 city=&amp;lsquo;杭州’条件为止，也就是图中的 ID_Y；&lt;/li>
&lt;li>对 sort_buffer 中的数据按照字段 name 进行排序；遍历排序结果，取前 1000 行，并按照 id 的值回到原表中取出 city、name 和 age 三个字段返回给客户端。&lt;/li>
&lt;/ul>
&lt;p>与全字段排序的区别：&lt;/p>
&lt;ul>
&lt;li>sort_buffer 只放入和排序相关的字段&lt;/li>
&lt;li>多了一次回表的过程，一般优化器会选择全字段排序。&lt;/li>
&lt;/ul>
&lt;p>&lt;mark>如果 MySQL 认为排序内存太小，会采用 rowid 排序算法，如果 MySQL 认为内存足够大，会优先选择全字段排序。&lt;/mark>&lt;/p>
&lt;h3 id="11目前你返回的数据行数较多如果返回行数较少那么会使用什么排序">11.目前你返回的数据行数较多，如果返回行数较少，那么会使用什么排序？
&lt;/h3>&lt;p>在 MySQL 中，排序会优先尝试使用内存：&lt;/p>
&lt;ul>
&lt;li>当需要排序的数据量小于 &lt;code>sort_buffer_size&lt;/code> 时，MySQL 会将数据加载到内存中并直接进行排序（通常使用快速排序）；&lt;/li>
&lt;li>如果数据量大于 &lt;code>sort_buffer_size&lt;/code>，MySQL 会将数据分批加载到内存中，执行部分排序后写入临时文件，最后通过外部归并排序完成整体排序。&lt;/li>
&lt;li>如果单行大于&lt;code>max_length_for_sort_data&lt;/code>,Mysql将会使用rowid的排序。&lt;/li>
&lt;li>对于 &lt;code>ORDER BY ... LIMIT N&lt;/code> 的场景，MySQL 可能使用堆排序（优先队列）来优化性能，动态维护前 N 条记录，从而避免完全排序。&lt;/li>
&lt;li>临时文件的使用则是基于内存不足时存储中间结果的需要。&lt;/li>
&lt;/ul>
&lt;h3 id="12-order-by-rand-是如何执行的">12. order by rand() 是如何执行的？
&lt;/h3>&lt;ol>
&lt;li>&lt;strong>读取数据集&lt;/strong>：MySQL 从存储引擎中读取目标表中的所有符合条件的行（如果没有 &lt;code>WHERE&lt;/code> 条件，则读取整个表）。&lt;/li>
&lt;li>&lt;strong>生成随机值&lt;/strong>：对于每一行，调用 &lt;code>RAND()&lt;/code> 函数生成一个随机值，并将随机值与该行的数据关联存储在内存或临时表中。&lt;/li>
&lt;li>&lt;strong>排序&lt;/strong>：使用内存中的随机值作为排序键，对数据进行排序。如果数据量过大而无法全部放入内存，则使用磁盘上的临时文件进行外部排序。&lt;/li>
&lt;li>&lt;strong>返回结果&lt;/strong>：根据排序后的数据返回结果。如果指定了 &lt;code>LIMIT&lt;/code>，则只返回前 N 条数据；否则返回排序后的所有行。&lt;/li>
&lt;/ol>
&lt;p>注意事项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ORDER BY RAND()&lt;/code> 对所有行生成随机数并排序，导致 CPU 和内存消耗较大。当表很大时，会严重影响性能。&lt;/li>
&lt;/ul>
&lt;p>优化建议：&lt;/p>
&lt;ul>
&lt;li>预先选取随机主键范围（如 &lt;code>WHERE id &amp;gt;= FLOOR(RAND() * max_id)&lt;/code>）结合 &lt;code>LIMIT&lt;/code>。&lt;/li>
&lt;li>使用应用层随机化，而非在 SQL 层执行。&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="其他问题">其他问题
&lt;/h3>&lt;ul>
&lt;li>两个日志的区别&lt;/li>
&lt;li>两阶段执行过程&lt;/li>
&lt;/ul>
&lt;h2 id="数据库事务">数据库事务
&lt;/h2>&lt;h3 id="1-介绍事务的特性">1. 介绍事务的特性
&lt;/h3>&lt;p>数据库事务可以保证多个对数据库的操作（也就是 SQL 语句）构成一个逻辑上的整体。简单说：&lt;strong>要么全部执行成功,要么全部不执行&lt;/strong> 。&lt;/p>
&lt;p>具有ACID特性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>原子性&lt;/strong>（&lt;code>Atomicity&lt;/code>）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>一致性&lt;/strong>（&lt;code>Consistency&lt;/code>）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>隔离性&lt;/strong>（&lt;code>Isolation&lt;/code>）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持久性&lt;/strong>（&lt;code>Durability&lt;/code>）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>注意：&lt;strong>只有保证了事务的持久性、原子性、隔离性之后，一致性才能得到保障。也就是说 A、I、D 是手段，C 是目的！&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>持久性是通过 redo log （重做日志）来保证的；&lt;/li>
&lt;li>原子性是通过 undo log（回滚日志） 来保证的；&lt;/li>
&lt;li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；&lt;/li>
&lt;li>一致性则是通过持久性+原子性+隔离性来保证；&lt;/li>
&lt;/ul>
&lt;h3 id="2-并发事务带来的问题">2. 并发事务带来的问题
&lt;/h3>&lt;ul>
&lt;li>脏读（Dirty read）：读取到其他事务未提交的数据。&lt;/li>
&lt;li>丢失修改（Lost to modify）：指两个或多个事务同时对同一数据进行更新操作，其中一个事务的更新被另一个事务覆盖，导致前一个事务的修改丢失。&lt;/li>
&lt;li>不可重复读（Unrepeatable read）：在一个事务中，前后读取的记录内容不一致；&lt;/li>
&lt;li>幻读（Phantom read）：在一个事务中，前后读取的记录数量不一致。&lt;/li>
&lt;/ul>
&lt;h3 id="3-不同事务隔离级别的区别">3. 不同事务隔离级别的区别
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>READ-UNCOMMITTED(读取未提交)&lt;/strong> ：可以读取尚未提交的数据变更。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>READ-COMMITTED(读取已提交)&lt;/strong> ：可以读取其他并发事务已经提交的数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>REPEATABLE-READ(可重复读)&lt;/strong> ：对同一字段的多次读取结果都是一致的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>SERIALIZABLE(可串行化)&lt;/strong> ：加读写锁，保证所有的事务依次逐个执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在不同隔离级别下可能发生的问题：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">隔离级别&lt;/th>
&lt;th style="text-align: center">脏读&lt;/th>
&lt;th style="text-align: center">不可重复读&lt;/th>
&lt;th style="text-align: center">幻读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">读未提交&lt;/td>
&lt;td style="text-align: center">√&lt;/td>
&lt;td style="text-align: center">√&lt;/td>
&lt;td style="text-align: center">√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">读提交&lt;/td>
&lt;td style="text-align: center">×&lt;/td>
&lt;td style="text-align: center">√&lt;/td>
&lt;td style="text-align: center">√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">可重复读&lt;/td>
&lt;td style="text-align: center">×&lt;/td>
&lt;td style="text-align: center">×&lt;/td>
&lt;td style="text-align: center">√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">串行化&lt;/td>
&lt;td style="text-align: center">×&lt;/td>
&lt;td style="text-align: center">×&lt;/td>
&lt;td style="text-align: center">×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="4-事务隔离的可见性实现">4. 事务隔离的可见性实现
&lt;/h3>&lt;p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。&lt;/p>
&lt;ul>
&lt;li>在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。&lt;/li>
&lt;li>在“读提交”隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。&lt;/li>
&lt;li>“读未提交”隔离级别下直接返回记录上的最新值，没有视图概念；&lt;/li>
&lt;li>而“串行化”隔离级别下直接用加锁的方式来避免并行访问。&lt;/li>
&lt;/ul>
&lt;h3 id="5-长事务的弊病">5. 长事务的弊病
&lt;/h3>&lt;p>长事务意味着系统里面会存在很老的事务视图，在这个事务提交之前，回滚记录都要保留，这会导致大量占用存储空间。除此之外，长事务还占用锁资源，可能会拖垮库。&lt;/p>
&lt;h3 id="6-mvcc是什么">6. MVCC是什么
&lt;/h3>&lt;p>MVCC 是一种并发控制机制，用于在多个并发事务同时读写数据库时保持数据的一致性和隔离性。&lt;/p>
&lt;p>读操作：当一个事务执行读操作时，它会使用快照读取。快照读取是基于事务开始时数据库中的状态创建的，因此事务不会读取其他事务尚未提交的修改。&lt;/p>
&lt;p>写操作：当一个事务执行写操作时，它会生成一个新的数据版本，事务提交后将修改后的数据写入数据库。&lt;/p>
&lt;p>为了防止数据库中的版本无限增长，MVCC 会定期进行版本的回收。回收机制会删除已经不再需要的旧版本数据，从而释放空间。&lt;/p>
&lt;h3 id="7mvvc中的快照是如何实现的">7.MVVC中的快照是如何实现的
&lt;/h3>&lt;p>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。&lt;/p>
&lt;p>数据表中的一行记录，有多个版本 (row)，每个版本有自己的 row trx_id，是transaction id进行赋值的。&lt;/p>
&lt;img src="./assets/行状态变更.png" alt="img" style="zoom: 50%;" />
&lt;p>当一个事务修改表中数据的某一行时，将旧版本的数据插入 Undo Log 中，看到的视图不是物理上物理上真实存在的，而是每次需要的时候根据当前版本和 undo log 计算出来的。比如，需要 V2 视图的时候，就是通过 V4 依次执行 U3、U2 算出来。根据 row trx_id、undo log这些信息，实现了数据行的多版本效果。&lt;/p>
&lt;p>在 &lt;code>InnoDB&lt;/code> 存储引擎中，创建一个新事务后，执行每个 &lt;code>select&lt;/code> 语句前，都会创建一个快照（Read View），&lt;strong>快照中保存了当前数据库系统中正处于活跃（没有 commit）的事务的 ID 号&lt;/strong>（即 m_ids）。&lt;/p>
&lt;p>Read View 存在两个变量：&lt;/p>
&lt;ul>
&lt;li>m_up_limit_id：数组里面事务 ID 的最小值&lt;/li>
&lt;li>m_low_limit_id ：当前系统里面已经创建过的事务 ID 的最大值&lt;/li>
&lt;/ul>
&lt;p>当用户在这个事务中要读取某个记录行的时候，&lt;code>InnoDB&lt;/code> 会将该记录行的 &lt;code>row TRX_ID&lt;/code> 与 &lt;code>Read View&lt;/code> 中的这两个变量 进行比较，判断是否满足可见性条件，不满足就回滚。&lt;/p>
&lt;img src="./assets/trans_visible.jpg" alt="trans_visible" style="zoom: 50%;" />
&lt;p>一个数据版本的 row trx_id，有以下几种可能：&lt;/p>
&lt;ul>
&lt;li>如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；&lt;/li>
&lt;li>如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；&lt;/li>
&lt;li>如果落在黄色部分，那就包括两种情况
&lt;ul>
&lt;li>a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；&lt;/li>
&lt;li>b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>核心简写：&lt;/p>
&lt;ul>
&lt;li>版本未提交，不可见；&lt;/li>
&lt;li>版本已提交，但是是在视图创建后提交的，不可见；&lt;/li>
&lt;li>版本已提交，而且是在视图创建前提交的，可见。&lt;/li>
&lt;/ul>
&lt;p>总结：&lt;/p>
&lt;ul>
&lt;li>row trx_id 和 transaction id 给每个数据行提供版本号&lt;/li>
&lt;li>undo log 提供版本链，帮助回滚到需要的数据&lt;/li>
&lt;li>该记录行的 &lt;code>row TRX_ID&lt;/code> 与 &lt;code>Read View&lt;/code> 中的这两个变量 m_up_limit_id 和 m_low_limit_id 进行比较，判断是否满足可见性条件，不满足就回滚。&lt;/li>
&lt;/ul>
&lt;h3 id="8-一致性读和当前读是什么">8. 一致性读和当前读是什么
&lt;/h3>&lt;p>一致性读是指事务在开启视图时候，直至提交之前，读行数据始终保持一致。主要用到&lt;strong>MVCC（多版本并发控制）&lt;/strong> 技术，在事务中，查询语句不会看到其他事务未提交以及以后事务的更改。&lt;/p>
&lt;p>当前读是指读取行数据的最新版本，通过给行数据加Next-key Lock锁来保证的。如果当前的行数据的Next-key Lock锁被其他事务占用的话，就需要进入锁等待。在事务中执行&lt;strong>select&amp;hellip;for update/lock in share mode、insert、update、delete&lt;/strong> 等都是当前读。&lt;/p>
&lt;h3 id="9幻读的定义以及幻读有什么问题">9.幻读的定义以及幻读有什么问题？
&lt;/h3>&lt;p>幻读是当一个事务在执行某个范围查询时，比如使用&lt;code>SELECT ... WHERE&lt;/code>语句，第一次查询返回了一些满足条件的行，但在事务继续执行的过程中，另一个事务插入了一些新的符合查询条件的行，导致第二次相同的查询返回的结果集比第一次更多。&lt;/p>
&lt;p>关键点在于插入，导致的结果集的不同。&lt;/p>
&lt;p>其实会导致数据不一致的问题，实际上，binlog的结果和实际表不一致。一致性指的是数据库内部数据状态在此刻的一致性，还包含了数据和日志在逻辑上的一致性。&lt;/p>
&lt;h3 id="10如何解决幻读">10.如何解决幻读
&lt;/h3>&lt;p>解决幻读的方式有很多，但是它们的核心思想就是一个事务在操作某张表数据的时候，另外一个事务不允许新增或者删除这张表中的数据了。&lt;/p>
&lt;ul>
&lt;li>在可重复读隔离级别，引入&lt;code>Next-key Lock（Record Lock+Gap Lock）&lt;/code>&lt;/li>
&lt;li>在读提交隔离级别，需要把 binlog 格式设置为 row，解决可能出现的数据和日志不一致问题，&lt;/li>
&lt;li>在可重复读的事务级别下，给事务操作的这张表添加表锁。&lt;/li>
&lt;/ul>
&lt;h3 id="其他问题-1">其他问题
&lt;/h3>&lt;h3 id="参考文献">参考文献：
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://leviathan.vip/2019/03/20/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-MVCC/#MVCC-1" target="_blank" rel="noopener"
>https://leviathan.vip/2019/03/20/InnoDB%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%88%86%E6%9E%90-MVCC/#MVCC-1&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="索引">索引
&lt;/h2>&lt;h3 id="1-哈希表有序数组和搜索树的优缺点">1. 哈希表、有序数组和搜索树的优缺点
&lt;/h3>&lt;ul>
&lt;li>哈希表是一种以键值对存储数据的结构。适用于等值查询的场景，例如NoSQL引擎，区间查询的速度很慢。&lt;/li>
&lt;li>有序数组在等值查询和范围查询的场景中性能优秀，但是在更新数据上，成本太高，只适用于静态存储引擎。&lt;/li>
&lt;li>搜索树的特点是父节点左子树所有结点的值小于父节点的值，右子树所有结点的值大于父节点的值。二叉树树高过高，访问多个数据块，磁盘随机读取数据块过于耗时，会采用N叉树。N取决于数据块的大小。以InnoDB 的一个整数字段索引为例，在一个节点（页）中，这个 N 差不多是 1200。&lt;/li>
&lt;/ul>
&lt;h3 id="2主键索引和普通索引是什么在查询中的区别是什么">2.主键索引和普通索引是什么，在查询中的区别是什么
&lt;/h3>&lt;p>在 InnoDB 中，表都是根据主键顺序以索引的形式存放的，每一个索引在 InnoDB 里面对应一棵 B+ 树。&lt;/p>
&lt;p>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为&lt;strong>聚簇索引&lt;/strong>（clustered index）。&lt;/p>
&lt;p>非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为&lt;strong>二级索引&lt;/strong>（secondary index）。&lt;/p>
&lt;p>在查询过程中，基于非主键索引的查询需要回表（到主键索引树在搜索一次），相比之下多扫描一颗索引树。&lt;/p>
&lt;img src="assets/innodb的索引组织结构.png" alt="img" style="zoom:33%;" />
&lt;h3 id="3-主键不是有序的会带来什么问题自增主键有什么优势有没有什么场景适合用业务字段直接做主键的呢">3. 主键不是有序的会带来什么问题，自增主键有什么优势，有没有什么场景适合用业务字段直接做主键的呢？
&lt;/h3>&lt;p>B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。当页满了，根据 B+ 树的算法，需要申请一个新的数据页，然后挪动部分数据过去，这个过程称为页分裂。页分裂操作会影响性能也会影响数据页的利用率。&lt;/p>
&lt;ul>
&lt;li>性能角度：自增主键的插入数据模式，正符合了递增插入的场景。每次插入一条新记录，都是追加操作，都不涉及到挪动其他记录，也不会触发叶子节点的分裂。而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。&lt;/li>
&lt;li>存储空间：主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。&lt;/li>
&lt;/ul>
&lt;p>在场景是&lt;mark>只有一个索引；该索引必须是唯一索引&lt;/mark>（KV场景），适合用业务字段直接做主键。&lt;/p>
&lt;h3 id="4-一条sql查询语句会扫描多少行以及几次树的搜索操作">4. 一条Sql查询语句，会扫描多少行以及几次树的搜索操作
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表：主键&lt;/span>&lt;span class="n">ID索引&lt;/span>&lt;span class="err">，&lt;/span>&lt;span class="n">k索引&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----+---+----+
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----+---+----+
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">aa&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bb&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">300&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cc&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">600&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ff&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">700&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">gg&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----+---+----+
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">执行语句：&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">k&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">between&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">and&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;img src="assets/innodb的索引组织结构.png" alt="img" style="zoom:33%;" />
&lt;p>这条 SQL 查询语句的执行流程：&lt;/p>
&lt;ul>
&lt;li>在 k 索引树上找到 k=3 的记录，取得 ID = 300；&lt;/li>
&lt;li>再到 ID 索引树查到 ID=300 对应的 R3；&lt;/li>
&lt;li>在 k 索引树取下一个值 k=5，取得 ID=500；&lt;/li>
&lt;li>再回到 ID 索引树查到 ID=500 对应的 R4；&lt;/li>
&lt;li>在 k 索引树取下一个值 k=6，不满足条件，循环结束。&lt;/li>
&lt;/ul>
&lt;h3 id="5-说一下覆盖索引和联合索引">5. 说一下覆盖索引和联合索引
&lt;/h3>&lt;p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，（核心是无需回表查询），就称之为 &lt;strong>覆盖索引（Covering Index）&lt;/strong> 。&lt;/p>
&lt;p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能。&lt;/p>
&lt;p>使用表中的多个字段创建索引，就是 &lt;strong>联合索引&lt;/strong>。&lt;/p>
&lt;h3 id="6-最左前缀原则详细介绍">6. 最左前缀原则详细介绍
&lt;/h3>&lt;p>最左前缀匹配原则指的是在使用索引时候，查询条件满足左前缀条件，可以利用索引加速检索。最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。&lt;/p>
&lt;p>对于一个联合索引 &lt;code>(A, B, C)&lt;/code>：&lt;/p>
&lt;ul>
&lt;li>索引能被以下查询利用：
&lt;ul>
&lt;li>&lt;code>WHERE A = ?&lt;/code>&lt;/li>
&lt;li>&lt;code>WHERE A = ? AND B = ?&lt;/code>&lt;/li>
&lt;li>&lt;code>WHERE A = ? AND B = ? AND C = ?&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>最左匹配原则会一直向右匹配，直到遇到范围查询（如 &amp;gt;、&amp;lt;）为止。对于 &amp;gt;=、&amp;lt;=、BETWEEN 以及前缀匹配 LIKE 的范围查询，不会停止匹配。&lt;/p>
&lt;h3 id="7-如何安排索引内的字段顺序">7. 如何安排索引内的字段顺序
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>如果通过调整顺序，可以帮助少维护一个索引。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以将区分度高的字段放在最左边，这也可以过滤更多数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>考虑空间。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="8-索引下推详细介绍">8. 索引下推详细介绍
&lt;/h3>&lt;p>索引下推优化（index condition pushdown)是指在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数，提高查询效率。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">user&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">zipcode&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;431200&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">MONTH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">birthdate&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://www.yangdiy.cn/p/mysql/assets/index-condition-pushdown-graphic-illustration.png"
width="718"
height="541"
srcset="https://www.yangdiy.cn/p/mysql/assets/index-condition-pushdown-graphic-illustration_hu7612177516252582024.png 480w, https://www.yangdiy.cn/p/mysql/assets/index-condition-pushdown-graphic-illustration_hu15908210992178577081.png 1024w"
loading="lazy"
alt="img"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;h3 id="9-普通索引和唯一索引在查询和更新有什么区别">9. 普通索引和唯一索引在查询和更新有什么区别
&lt;/h3>&lt;p>在查询过程中：&lt;/p>
&lt;ul>
&lt;li>对于普通索引来说，查找到满足条件的第一个记录 (5,500) 后，需要查找下一个记录，直到碰到第一个不满足 k=5 条件的记录。&lt;/li>
&lt;li>对于唯一索引来说，由于索引定义了唯一性，查找到第一个满足条件的记录后，就会停止继续检索。&lt;/li>
&lt;/ul>
&lt;p>查询带来的性能差距是微乎其微。&lt;/p>
&lt;p>在更新过程中：&lt;/p>
&lt;p>第一种情况是，这个记录要更新的目标页在内存中。&lt;/p>
&lt;ul>
&lt;li>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；&lt;/li>
&lt;li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。&lt;/li>
&lt;/ul>
&lt;p>在该情况下，性能差别很小。&lt;/p>
&lt;p>第二种情况是，这个记录要更新的目标页不在内存中。&lt;/p>
&lt;ul>
&lt;li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；&lt;/li>
&lt;li>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。&lt;/li>
&lt;/ul>
&lt;p>因为将数据从磁盘读入内存涉及随机 IO 的访问，是成本比较高的操作，对于唯一索引就需要不断地将数据页读入内存，然后change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。&lt;/p>
&lt;h3 id="10-change-buffer-是什么">10. change Buffer 是什么？
&lt;/h3>&lt;p>当某个行数据所在的数据页还没有在内存中的话，在不影响数据一致性的前提下，InnoDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了，后续会将里面操作应用在原数据页中。&lt;/p>
&lt;p>当访问这个数据页（将数据页读入内存中）会触发 merge 操作，在写多读少的业务场景中，在一个数据页做 merge 之前，change buffer 记录的变更越多（也就是这个页面上要更新的次数越多），使用效果越好。但是在写入之后马上会做查询场景中，会触发change buffer的merge 过程，增加了 change buffer 的维护代价。&lt;/p>
&lt;h3 id="11-change-buffer-和-redo-log-都是减少随机读写那么之间区别是什么">11. change buffer 和 redo log 都是减少随机读写，那么之间区别是什么
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写）（将内存的数据写入磁盘中）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>change buffer 主要节省的则是随机读磁盘的 IO 消耗。（主要是将更新动作变缓，减少读入数据页的过程，）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="12-当机器掉电重启会不会导致-change-buffer-丢失呢会不会发生数据丢失情况">12. 当机器掉电重启，会不会导致 change buffer 丢失呢，会不会发生数据丢失情况？
&lt;/h3>&lt;p>不会丢失。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Change Buffer 的内容不仅仅在内存中也会持久化，同时Change Buffer 的修改操作（如插入、更新或删除）也会被记录到 &lt;strong>Redo Log&lt;/strong> 中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在数据库掉电恢复时会重放 Redo Log，恢复未完成的事务和未刷入磁盘的修改，包括 Change Buffer 的修改。如果 Change Buffer 中有未完成的合并操作，InnoDB 会通过后台线程继续执行这些合并，将修改逐步应用到目标数据页。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="13-前缀索引优缺点">13. 前缀索引优缺点
&lt;/h3>&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>使用前缀索引和字段区分度有很大的关系，区分度越高越好。&lt;/li>
&lt;li>前缀索引可以对字符串的前缀构建索引，定义好前缀长度，就可以做到既节省空间，又不用额外增加太多的查询成本。&lt;/li>
&lt;/ul>
&lt;p>缺点：&lt;/p>
&lt;ul>
&lt;li>使用前缀索引就用不上覆盖索引对查询性能的优化&lt;/li>
&lt;li>前缀索引选取字段长度的越长，占用的磁盘空间就越大，相同的数据页能放下的索引值就越少，搜索的效率也就会越低。&lt;/li>
&lt;/ul>
&lt;p>提高前缀索引搜索效率方式：&lt;/p>
&lt;ul>
&lt;li>对字符串字段进行处理使其区分度增加，例如倒叙、截断等；&lt;/li>
&lt;li>使用hash字段；&lt;/li>
&lt;/ul>
&lt;h2 id="锁">锁
&lt;/h2>&lt;h3 id="全局锁是什么在哪些场景下使用">全局锁是什么，在哪些场景下使用。
&lt;/h3>&lt;p>全局锁就是对整个数据库实例加锁。全局锁的典型使用场景是，做全库逻辑备份。&lt;/p>
&lt;p>使用风险：&lt;/p>
&lt;ul>
&lt;li>如果在主库备份，在备份期间不能更新，业务停摆&lt;/li>
&lt;li>如果在从库备份，备份期间不能执行主库同步的binlog，导致主从延迟&lt;/li>
&lt;/ul>
&lt;p>对于InnoDB引擎，可以通过在可重复读隔离级别下开启一个事务，获取数据，在这个过程中数据是可以正常更新的。&lt;/p>
&lt;p>官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。（只适用于支持事务引擎）&lt;/p>
&lt;h3 id="表级别的锁有哪些">表级别的锁有哪些？
&lt;/h3>&lt;p>MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。&lt;/p>
&lt;p>表锁会限制别的线程的读写外，也可能限定了本线程的读写操作，一般用的少，影响面太大了。&lt;/p>
&lt;p>MDL主要用于隔离DML（Data Manipulation Language，数据操纵语言，如select）和DDL（Data Definition Language，数据定义语言，如改表头新增一列）操作之间的干扰，保证对表数据读写正确。&lt;/p>
&lt;p>当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。&lt;/p>
&lt;h3 id="元数据锁在什么情况下会发生阻塞">元数据锁在什么情况下会发生阻塞？
&lt;/h3>&lt;p>当有线程在执行 select 语句（ 加 MDL 读锁）的期间，如果有其他线程要更改该表的结构（ 申请 MDL 写锁），那么将会被阻塞，直到执行完 select 语句（ 释放 MDL 读锁）。&lt;/p>
&lt;p>反之，当有线程对表结构进行变更（ 加 MDL 写锁）的期间，如果有其他线程执行了 CRUD 操作（ 申请 MDL 读锁），那么就会被阻塞，直到表结构变更完成（ 释放 MDL 写锁）。&lt;/p>
&lt;p>MDL 是在事务提交后才会释放，这意味着&lt;strong>事务执行期间，MDL 是一直持有的&lt;/strong>。&lt;/p>
&lt;p>如果长事务存在DDL操作，后面有很多DML操作发生阻塞，导致线程爆满。&lt;/p>
&lt;p>为了能安全的对表结构进行变更，在对表结构变更前，先要看看数据库中的长事务，是否有事务已经对表加上了 MDL 读锁，如果可以考虑设置超时或者 kill 掉这个长事务，然后再做表结构的变更。&lt;/p>
&lt;h3 id="意向锁是什么干什么用的">意向锁是什么，干什么用的？
&lt;/h3>&lt;p>意向锁是一个表级锁，为了支持 InnoDB 的多粒度锁，它解决的是表锁和行锁共存的问题。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>意向共享锁（Intention Shared Lock，IS 锁）&lt;/strong>：事务有意向对表中的某些记录加共享锁（S 锁），加共享锁前必须先取得该表的 IS 锁。&lt;/li>
&lt;li>&lt;strong>意向排他锁（Intention Exclusive Lock，IX 锁）&lt;/strong>：事务有意向对表中的某些记录加排他锁（X 锁），加排他锁之前必须先取得该表的 IX 锁。&lt;/li>
&lt;/ul>
&lt;p>也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。&lt;/p>
&lt;p>当我们需要给一个表加表锁的时候，我们需要根据去判断表中有没有数据行被锁定，以确定是否能加成功。&lt;/p>
&lt;p>假如没有意向锁，那么我们就得遍历表中所有数据行来判断有没有行锁；&lt;/p>
&lt;p>有了意向锁这个表级锁之后，则我们直接判断一次就知道表中是否有数据行被锁定了。因为意向锁会和表锁互斥。&lt;/p>
&lt;p>意向锁之间是互相兼容的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>IS 锁&lt;/th>
&lt;th>IX 锁&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>IS 锁&lt;/td>
&lt;td>兼容&lt;/td>
&lt;td>兼容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IX 锁&lt;/td>
&lt;td>兼容&lt;/td>
&lt;td>兼容&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>意向锁和共享锁和排它锁互斥（这里指的是表级别的共享锁和排他锁，意向锁不会与行级的共享锁和排他锁互斥）。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>IS 锁&lt;/th>
&lt;th>IX 锁&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>S 锁&lt;/td>
&lt;td>兼容&lt;/td>
&lt;td>互斥&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>X 锁&lt;/td>
&lt;td>互斥&lt;/td>
&lt;td>互斥&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="行锁是什么有哪些">行锁是什么，有哪些，
&lt;/h3>&lt;p>行锁就是针对数据表中行数据的锁，主要有三种：&lt;/p>
&lt;ul>
&lt;li>Record Lock，记录锁，也就是仅仅把一条记录锁上；&lt;/li>
&lt;li>Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；&lt;/li>
&lt;li>Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。&lt;/li>
&lt;li>插入意向锁：表示了一种插入意图，即当多个不同的事务，同时往同一个索引的同一个间隙中插入数据的时候，它们互相之间无需等待，即不会阻塞。&lt;/li>
&lt;/ul>
&lt;p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">&lt;/th>
&lt;th style="text-align: left">S 锁&lt;/th>
&lt;th>X 锁&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">S 锁&lt;/td>
&lt;td style="text-align: left">不冲突&lt;/td>
&lt;td>冲突&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">X 锁&lt;/td>
&lt;td style="text-align: left">冲突&lt;/td>
&lt;td>冲突&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>由于 MVCC 的存在，对于一般的 &lt;code>SELECT&lt;/code> 语句，InnoDB 不会加任何锁。不过， 你可以通过以下语句显式加共享锁或排他锁。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">共享锁&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">可以在&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MySQL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">和&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MySQL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">中使用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">LOCK&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">IN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SHARE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">MODE&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">共享锁&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">可以在&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MySQL&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">中使用&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SHARE&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">排他锁&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FOR&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">UPDATE&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Gap Lock：为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 。间隙锁锁住了两个值的间隙，不包括记录本身，防止进行插入操作。间隙锁之间都不存在冲突关系。&lt;/p>
&lt;p>next-key lock：间隙锁+行锁，锁定一个范围，包含记录本身，是左开右闭的区间。&lt;/p>
&lt;p>插入意向锁：如果说间隙锁锁住的是一个区间，那么「插入意向锁」锁住的就是一个点。因而从这个角度来说，插入意向锁确实是一种特殊的间隙锁。&lt;strong>插入意向锁和间隙锁之间是冲突的&lt;/strong>。&lt;/p>
&lt;h3 id="两阶段协议是什么">两阶段协议是什么？
&lt;/h3>&lt;p>两阶段锁协议：在 InnoDB 事务中，行锁是在需要（更新/插入行数据）的时候才加上的，需要等到事务结束时才释放。&lt;/p>
&lt;p>如果你的事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放，以减少锁等待的时间，提高并发性能。&lt;/p>
&lt;h3 id="select-for-update--update-等具有加锁性质的语句加锁有什么需要注意的">select for update / update 等具有加锁性质的语句加锁有什么需要注意的
&lt;/h3>&lt;p>当我们执行 select for update / update 语句时，实际上是会对记录加锁带基本单位是 next-key 锁，加锁的位置准确的说，锁是加在索引上的而非行上。如果其他事务对持有锁的记录进行修改时是会被阻塞的。另外，这个锁并不是执行完 update 语句就会释放的，而是会等事务结束时才会释放。&lt;/p>
&lt;p>&lt;strong>在 select for update / update 语句的查询条件没有使用索引，就会全表扫描，于是就会对所有记录加上 next-key 锁（记录锁 + 间隙锁），相当于把整个表锁住了&lt;/strong>。&lt;/p>
&lt;p>核心在于：&lt;strong>这条语句在执行过程种，优化器最终选择的是全表扫描，那么就会对全表的记录进行加锁。&lt;/strong>&lt;/p>
&lt;h3 id="如何避免执行加锁性质的语句锁住全表事故的发生">如何避免执行加锁性质的语句锁住全表事故的发生？
&lt;/h3>&lt;p>当 sql_safe_updates 设置为 1 时。update 语句必须满足如下条件之一才能执行成功：&lt;/p>
&lt;ul>
&lt;li>使用 where，并且 where 条件中必须有索引列；&lt;/li>
&lt;li>使用 limit；&lt;/li>
&lt;li>同时使用 where 和 limit，此时 where 条件中可以没有索引列；&lt;/li>
&lt;/ul>
&lt;p>delete 语句必须满足以下条件能执行成功：&lt;/p>
&lt;ul>
&lt;li>同时使用 where 和 limit，此时 where 条件中可以没有索引列；&lt;/li>
&lt;/ul>
&lt;h3 id="5死锁是什么如何解决">5.死锁是什么，如何解决？
&lt;/h3>&lt;p>当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。&lt;/p>
&lt;p>死锁的四个必要条件：&lt;strong>互斥、占有且等待、不可强占用、循环等待&lt;/strong>。只要系统发生死锁，这些条件必然成立，但是只要破坏任意一个条件就死锁就不会成立。&lt;/p>
&lt;p>当出现死锁以后，有两种策略通过「打破循环等待条件」来解除：&lt;/p>
&lt;ul>
&lt;li>一种策略是，直接进入等待，直到超时。&lt;/li>
&lt;li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。&lt;/li>
&lt;/ul>
&lt;p>对于业务来说，第一种策略是不可取的，时间太短，会出现很多误伤，时间太长影响体验。&lt;/p>
&lt;p>正常情况下采用第二种策略，能够快速发现并进行处理的，但是它也是有额外负担的。当较多线程更新同一行，死锁检测会消耗大量的 CPU 资源。&lt;/p>
&lt;h3 id="6怎么解决由这种热点行更新导致的性能问题呢">6.怎么解决由这种热点行更新导致的性能问题呢？
&lt;/h3>&lt;p>高并发下避免死锁检测带来的负面影响：&lt;/p>
&lt;ol>
&lt;li>确保业务上不会产生死锁，直接将死锁检测关闭。（innodb 自带死锁检测）&lt;/li>
&lt;li>在数据库中间件中统一对更新同一行的请求进行排队，控制并发度。&lt;/li>
&lt;li>业务逻辑上进行优化，将一行数据分解成多行，降低写入压力。&lt;/li>
&lt;/ol>
&lt;h3 id="9-加锁的原则">9. 加锁的原则
&lt;/h3>&lt;p>原则 1：加锁的基本单位是 next-key lock。next-key lock 是前开后闭区间，具体执行的时候，是要分成间隙锁和行锁两段来执行的。&lt;/p>
&lt;p>原则 2：查找过程中访问到的对象才会加锁。加锁是加在索引上的。&lt;/p>
&lt;p>优化 1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。（在唯一的，所以退化成行锁）&lt;/p>
&lt;p>优化 2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock 退化为间隙锁。（因为最后一个值不满足，所以可以不加锁）&lt;/p>
&lt;blockquote>
&lt;p>与锁相关的：06、07、20、21、30、39、40&lt;/p>
&lt;/blockquote>
&lt;h2 id="内存">内存
&lt;/h2>&lt;h2 id="高可用">高可用
&lt;/h2>&lt;h3 id="mysql主备的基本流程">Mysql主备的基本流程
&lt;/h3>&lt;img src="./assets/主备一致.webp" alt="主备流程" style="zoom: 50%;" />
&lt;p>主库接收到客户端的更新请求后，执行内部事务的更新逻辑，同时写 binlog。&lt;/p>
&lt;p>备库 B 跟主库 A 之间维持了一个长连接。主库 A 内部有一个线程，专门用于服务备库 B 的这个长连接。一个事务日志同步的完整过程是这样的：&lt;/p>
&lt;ul>
&lt;li>在备库 B 上通过 change master 命令，设置主库 A 的 IP、端口、用户名、密码，以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量。&lt;/li>
&lt;li>在备库 B 上执行 start slave 命令，这时候备库会启动两个线程，就是 io_thread 和 sql_thread。其中 io_thread 负责与主库建立连接。&lt;/li>
&lt;li>主库 A 校验完用户名、密码后，开始按照备库 B 传过来的位置，从本地读取 binlog，发给 B。&lt;/li>
&lt;li>备库 B 拿到 binlog 后，写到本地文件，称为中转日志（relay log）。&lt;/li>
&lt;li>sql_thread 读取中转日志，解析出日志里的命令，并执行。&lt;/li>
&lt;/ul>
&lt;h3 id="对于主备库为双m结构互为主备关系会发生什么问题怎么解决">对于主备库为双M结构，互为主备关系，会发生什么问题？怎么解决？
&lt;/h3>&lt;p>会发生循环复制的问题。&lt;/p>
&lt;p>业务逻辑在节点 A 上更新了一条语句，然后再把生成的 binlog 发给节点 B，节点 B 执行完这条更新语句后也会生成 binlog。节点 A 同时是节点 B 的备库，相当于又把节点 B 新生成的 binlog 拿过来执行了一次，然后节点 A 和 B 间，会不断地循环执行这个更新语句，也就是循环复制了。&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ul>
&lt;li>规定两个库的 server id 必须不同，如果相同，则它们之间不能设定为主备关系；&lt;/li>
&lt;li>一个备库接到 binlog 并在重放的过程中，生成与原 binlog 的 server id 相同的新的 binlog；&lt;/li>
&lt;li>每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。&lt;/li>
&lt;/ul>
&lt;h3 id="主备延迟的原因">主备延迟的原因
&lt;/h3>&lt;ul>
&lt;li>有些部署条件下，备库所在机器的性能要比主库所在的机器性能差。
&lt;ul>
&lt;li>解决方案：主备库选用相同规格的机器，并且做对称部署，&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>备库的压力大。
&lt;ul>
&lt;li>解决方案：一主多从。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>大事务&lt;/li>
&lt;li>备库的并行复制能力。&lt;/li>
&lt;/ul>
&lt;h2 id="日志篇">日志篇
&lt;/h2>&lt;h3 id="redolog">redolog
&lt;/h3>&lt;h4 id="为什么需要-redo-log">为什么需要 &lt;code>redo log&lt;/code>
&lt;/h4>&lt;p>&lt;code>redo log&lt;/code> 是为了保证数据库的 &lt;strong>&lt;code>crash-safe&lt;/code> 能力&lt;/strong>。
当数据库发生异常（如宕机或掉电）时，&lt;code>redo log&lt;/code> 能够帮助恢复已提交但尚未完全持久化到数据文件的事务，确保数据一致性并减少数据丢失。&lt;/p>
&lt;hr>
&lt;h4 id="什么是-redo-log">什么是 &lt;code>redo log&lt;/code>
&lt;/h4>&lt;p>&lt;code>redo log&lt;/code> 是 &lt;strong>InnoDB 存储引擎实现的物理日志&lt;/strong>，用于记录对数据页的修改操作。它的关键特性包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>记录内容&lt;/strong>：
记录某个表空间中某数据页特定位置的修改，例如对表空间 &lt;code>XXX&lt;/code> 中数据页 &lt;code>YYY&lt;/code> 偏移量 &lt;code>ZZZ&lt;/code> 的更新 &lt;code>AAA&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>固定大小，循环写入&lt;/strong>：
默认大小为 4 GB，由多个日志文件组成，循环写入。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>write pos&lt;/code>（写指针）&lt;/strong>：记录当前写入的位置，随着写入不断推进，循环至日志文件的开头。&lt;/li>
&lt;li>&lt;strong>&lt;code>checkpoint&lt;/code>（检查点指针）&lt;/strong>：记录当前可以被擦除的位置。在擦除之前，日志内容必须已应用到数据文件中。&lt;/li>
&lt;/ul>
&lt;p>优点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>实现事务的持久性，让 MySQL 有 crash-safe 的能力&lt;/strong>，能够保证 MySQL 在任何时间段突然崩溃，重启后之前已提交的记录都不会丢失；&lt;/li>
&lt;li>&lt;strong>将写操作从「随机写」变成了「顺序写」&lt;/strong>，提升 MySQL 写入磁盘的性能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="binlog">binlog
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>是server层实现，是逻辑日志，记录的是语句的原始逻辑。比如“给 ID=2 这一行的 c 字段加 1 ”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>主要用于备份恢复，主从恢复，增量备份。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>数据恢复&lt;/strong>：在数据库发生故障时，通过 binlog 可以进行数据的恢复。&lt;/li>
&lt;li>&lt;strong>主从复制&lt;/strong>：在主从架构中，binlog 用于同步主库的操作到从库。&lt;/li>
&lt;li>&lt;strong>增量备份&lt;/strong>：binlog 支持记录数据库的增量变化，便于在全量备份的基础上快速恢复最新数据。&lt;/li>
&lt;/ol>
&lt;h3 id="undolog">undolog
&lt;/h3>&lt;p>undo log 是一种用于撤销回退的日志。在事务没提交之前，MySQL 会先记录更新前的数据到 undo log 日志文件里面，当事务回滚时，可以利用 undo log 来进行回滚。【可以理解成一种版本链】&lt;/p>
&lt;p>&lt;strong>它保证了事务的 ACID 特性 (opens new window)中的原子性（Atomicity）&lt;/strong>。&lt;/p>
&lt;p>在发生回滚时，就读取 undo log 里的数据，然后做原先相反操作。比如当 delete 一条记录时，undo log 中会把记录中的内容都记下来，然后执行回滚操作的时候，就读取 undo log 里的数据，然后进行 insert 操作。&lt;/p>
&lt;p>针对 delete 操作和 update 操作会有一些特殊的处理：&lt;/p>
&lt;ul>
&lt;li>delete操作实际上不会立即直接删除，而是将delete对象打上delete flag，标记为删除，最终的删除操作是purge线程完成的。&lt;/li>
&lt;li>update分为两种情况：update的列是否是主键列。
&lt;ul>
&lt;li>如果不是主键列，在undo log中直接反向记录是如何update的。即update是直接进行的。&lt;/li>
&lt;li>如果是主键列，update分两部执行：先删除该行，再插入一行目标行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>undo log 还有一个作用，通过 ReadView + undo log 实现 MVCC（多版本并发控制）&lt;/strong>。&lt;/p>
&lt;p>对于「读提交」和「可重复读」隔离级别的事务来说，它们的快照读（普通 select 语句）是通过「事务的 Read View 里的字段」和「记录中的两个隐藏列（trx_id 和 roll_pointer）」的比对，如果不满足可见行，就会顺着 undo log 版本链里找到满足其可见性的记录。&lt;/p>
&lt;p>因此，undo log 两大作用：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>实现事务回滚，保障事务的原子性&lt;/strong>。事务处理过程中，如果出现了错误或者用户执 行了 ROLLBACK 语句，MySQL 可以利用 undo log 中的历史数据将数据恢复到事务开始之前的状态。&lt;/li>
&lt;li>&lt;strong>实现 MVCC（多版本并发控制）关键因素之一&lt;/strong>。MVCC 是通过 ReadView + undo log 实现的。undo log 为每条记录保存多份历史数据，MySQL 在执行快照读（普通 select 语句）的时候，会根据事务的 Read View 里的信息，顺着 undo log 的版本链找到满足其可见性的记录。&lt;/li>
&lt;/ul>
&lt;h3 id="两阶段提交日志具体流程">两阶段提交日志具体流程
&lt;/h3>&lt;ol>
&lt;li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。&lt;/li>
&lt;li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。&lt;/li>
&lt;li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。&lt;/li>
&lt;/ol>
&lt;h3 id="为什么是两阶段提交日志">为什么是两阶段提交日志
&lt;/h3>&lt;p>核心目的：保证两份日志之间的逻辑一致（数据一致性）。&lt;/p>
&lt;p>从反证法说明：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>先写 redo log 直接提交，然后写 binlog&lt;/strong>：假设写完 redo log 后，机器挂了，binlog 日志没有被写入，那么机器重启后，这台机器会通过 redo log 恢复数据，但是这个时候 binlog 并没有记录该数据，后续进行机器备份的时候，就会丢失这一条数据，同时主从同步也会丢失这一条数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>先写 binlog，然后写 redo log&lt;/strong>，假设写完了 binlog，机器异常重启了，由于没有 redo log，本机是无法恢复这一条记录的，但是 binlog 又有记录，那么和上面同样的道理，就会产生数据不一致的情况。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="两阶段提交日志存在什么问题">两阶段提交日志存在什么问题？
&lt;/h3>&lt;p>两阶段提交虽然保证了两个日志文件的数据一致性，但是性能很差，主要有两个方面的影响：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>磁盘 I/O 次数高&lt;/strong>：对于“双1”配置，每个事务提交都会进行两次 fsync（刷盘），一次是 redo log 刷盘，另一次是 binlog 刷盘。&lt;/li>
&lt;li>&lt;strong>锁竞争激烈&lt;/strong>：两阶段提交虽然能够保证「单事务」两个日志的内容一致，但在「多事务」的情况下，却不能保证两者的提交顺序一致，因此，在两阶段提交的流程基础上，还需要加一个锁来保证提交的原子性，从而保证多事务的情况下，两个日志的提交顺序一致。&lt;/li>
&lt;/ul>
&lt;h3 id="什么时候怎么刷盘binlog">什么时候，怎么刷盘binlog
&lt;/h3>&lt;p>写入的机制：事务执行过程中，先把日志写到 binlog cache，事务提交的时候，再把 binlog cache 写到 binlog 文件中。&lt;/p>
&lt;p>一个事务的 binlog 是不能被拆开的，因此不论这个事务多大，也要确保一次性写入。系统给 binlog cache 分配了一片内存，每个线程一个，如果超过了参数规定的大小，就要暂存到磁盘的page cache。&lt;/p>
&lt;p>对于持久化也涉及到两步：&lt;/p>
&lt;ul>
&lt;li>write，指的就是指把日志写入到文件系统的 page cache，并没有把数据持久化到磁盘。&lt;/li>
&lt;li>fsync，才是将数据持久化到磁盘的操作。&lt;/li>
&lt;/ul>
&lt;p>MySQL提供一个 sync_binlog 参数来控制数据库的 binlog 刷到磁盘上的频率：&lt;/p>
&lt;ul>
&lt;li>sync_binlog = 0 的时候，表示每次提交事务都只 write，不 fsync，后续交由操作系统决定何时将数据持久化到磁盘；&lt;/li>
&lt;li>sync_binlog = 1 的时候，表示每次提交事务都会 write，然后马上执行 fsync；&lt;/li>
&lt;li>sync_binlog =N(N&amp;gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。&lt;/li>
&lt;/ul>
&lt;p>不同的设置会带来不同的结果：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>设置是 sync_binlog = 0，这时候的性能是最好的，但是风险也是最大的。因为一旦主机发生异常重启，还没持久化到磁盘的数据就会丢失。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sync_binlog 设置为 1 的时候，是最安全但是性能损耗最大的设置。因为当设置为 1 的时候，即使主机发生异常重启，最多丢失一个事务的 binlog，而已经持久化到磁盘的数据就不会有影响，不过就是对写入性能影响太大。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>sync_binlog 设置为 N的时候，需要能容少量事务的 binlog 日志丢失的风险。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="什么时候怎么刷盘redo-log">什么时候，怎么刷盘redo log
&lt;/h3>&lt;p>执行一个事务的过程中，产生的 redo log 也不是直接写入磁盘的，会先写入到 redo log buffer，后续在持久化到磁盘。&lt;/p>
&lt;p>为了控制 redo log 的写入策略，InnoDB 提供了 innodb_flush_log_at_trx_commit 参数，它有三种可能取值：&lt;/p>
&lt;ul>
&lt;li>当设置该&lt;strong>参数为 0 时&lt;/strong>，表示每次事务提交时 ，还是&lt;strong>将 redo log 留在 redo log buffer 中&lt;/strong> ，该模式下在事务提交时不会主动触发写入磁盘的操作。&lt;/li>
&lt;li>当设置该&lt;strong>参数为 1 时&lt;/strong>，表示每次事务提交时，都&lt;strong>将缓存在 redo log buffer 里的 redo log 直接持久化到磁盘&lt;/strong>，这样可以保证 MySQL 异常重启之后数据不会丢失。&lt;/li>
&lt;li>当设置该&lt;strong>参数为 2 时&lt;/strong>，表示每次事务提交时，都只是缓存在 redo log buffer 里的 redo log 写到文件的page cache。&lt;/li>
&lt;/ul>
&lt;p>InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。&lt;/p>
&lt;p>如果 write pos 追上了 checkpoint，就意味着 &lt;strong>redo log 文件满了，这时 MySQL 不能再执行新的更新操作，也就是说 MySQL 会被阻塞&lt;/strong>（&lt;em>因此所以针对并发量大的系统，适当设置 redo log 的文件大小非常重要&lt;/em>），此时&lt;strong>会停下来将 Buffer Pool 中的脏页刷新到磁盘中，然后标记 redo log 哪些记录可以被擦除，接着对旧的 redo log 记录进行擦除，等擦除完旧记录腾出了空间，checkpoint 就会往后移动（图中顺时针）&lt;/strong>，然后 MySQL 恢复正常运行，继续执行新的更新操作。&lt;/p>
&lt;h3 id="binlog的三种格式之间的对比">binlog的三种格式之间的对比。
&lt;/h3>&lt;p>binlog 有三种格式，一种是 statement，一种是 row，第三种格式 mixed，是前两种格式的混合。&lt;/p>
&lt;p>statement 格式中 binlog文件记录的是真实执行的语句。存在主备不一致的情况，例如在主库执行这条 SQL 语句的时候，用的是索引 a；而在备库执行这条 SQL 语句的时候，却使用了索引 b。&lt;/p>
&lt;p>row 格式的binlog记录的是真实数据行的字段的值，不存在主备不一致。&lt;/p>
&lt;p>前两种格式各自的优缺点：&lt;/p>
&lt;ul>
&lt;li>因为 statement 格式的 binlog 可能会导致主备不一致，row 格式不会发生这个问题。&lt;/li>
&lt;li>但 row 格式的缺点是，很占空间。比如你用一个 delete 语句删掉 10 万行数据，用 statement 的话就是一个 SQL 语句被记录到 binlog 中，占用几十个字节的空间。但如果用 row 格式的 binlog，就要把这 10 万条记录都写到 binlog 中。这样做，不仅会占用更大的空间，同时写 binlog 也要耗费 IO 资源，影响执行速度。&lt;/li>
&lt;/ul>
&lt;p>所以根据这些优缺点，MySQL 就取了个折中方案，也就是有了 mixed 格式的 binlog。MySQL 自己会判断这条 SQL 语句是否可能引起主备不一致，如果有可能，就用 row 格式，否则就用 statement 格式。&lt;/p>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h3 id="在两阶段提交日志有什么方法可以降低磁盘io">在两阶段提交日志，有什么方法可以降低磁盘IO？
&lt;/h3>&lt;p>依赖于组提交（group commit）机制。&lt;/p>
&lt;p>日志逻辑序列号（log sequence number，LSN） 是单调递增的，用来对应 redo log 的一个个写入点。每次写入长度为 length 的 redo log， LSN 的值就会加上 length。&lt;/p>
&lt;p>有三组并发事务都要持久化磁盘，LSN都不一样，对应的 LSN 分别是 50、120 和 160。。过程如下：&lt;/p>
&lt;ul>
&lt;li>trx1 是第一个到达的，会被选为这组的 leader；&lt;/li>
&lt;li>等 trx1 要开始写盘的时候，这个组里面已经有了三个事务，这时候 LSN 也变成了 160；&lt;/li>
&lt;li>trx1 去写盘的时候，带的就是 LSN=160，因此等 trx1 返回时，所有 LSN 小于等于 160 的 redo log，都已经被持久化到磁盘；&lt;/li>
&lt;li>这时候 trx2 和 trx3 就可以直接返回了。&lt;/li>
&lt;/ul>
&lt;p>一次组提交里面，组员越多，节约磁盘 IOPS 的效果越好。&lt;/p>
&lt;p>引入了组提交机制后，两阶段提交日志中的 prepare 阶段不变，对于binlog的wirte 阶段拆分为三个过程：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>flush 阶段&lt;/strong>：多个事务按进入的顺序将 binlog 从 cache 写入文件（不刷盘）；&lt;/li>
&lt;li>&lt;strong>sync 阶段&lt;/strong>：对 binlog 文件做 fsync 操作（多个事务的 binlog 合并一次刷盘）；&lt;/li>
&lt;/ul>
&lt;p>上面的&lt;strong>每个阶段都有一个队列&lt;/strong>，每个阶段有锁进行保护，因此保证了事务写入的顺序，第一个进入队列的事务会成为 leader，leader领导所在队列的所有事务，全权负责整队的操作，完成后通知队内其他事务操作结束。&lt;/p>
&lt;blockquote>
&lt;p>为了提高redolog组提交性能，在 prepare 阶段不再让事务各自执行 redo log 刷盘操作，而是推迟到组提交的 flush 阶段之后。（在两个阶段之间）通过延迟写 redo log 的方式，为 redolog 做了一次组写入。&lt;/p>
&lt;/blockquote>
&lt;p>如果想提升 binlog 组提交的效果，可以通过设置下面这两个参数来实现：&lt;/p>
&lt;ul>
&lt;li>&lt;code>binlog_group_commit_sync_delay= N&lt;/code>，表示在等待 N 微妙后，直接调用 fsync，将处于文件系统中 page cache 中的 binlog 刷盘，也就是将「 binlog 文件」持久化到磁盘。&lt;/li>
&lt;li>&lt;code>binlog_group_commit_sync_no_delay_count = N&lt;/code>，表示如果队列中的事务数达到 N 个，就忽视binlog_group_commit_sync_delay 的设置，直接调用 fsync，将处于文件系统中 page cache 中的 binlog 刷盘。&lt;/li>
&lt;/ul>
&lt;h3 id="如果你的-mysql-现在出现了性能瓶颈而且瓶颈在-io-上可以通过哪些方法来提升性能呢">如果你的 MySQL 现在出现了性能瓶颈，而且瓶颈在 IO 上，可以通过哪些方法来提升性能呢？
&lt;/h3>&lt;ul>
&lt;li>设置 binlog_group_commit_sync_delay 和 binlog_group_commit_sync_no_delay_count 参数，减少 binlog 的写盘次数。这个方法是基于“额外的故意等待”来实现的，因此可能会增加语句的响应时间，但没有丢失数据的风险。&lt;/li>
&lt;li>将 sync_binlog 设置为大于 1 的值（比较常见是 100~1000）。这样做的风险是，主机掉电时会丢 binlog 日志。&lt;/li>
&lt;li>将 innodb_flush_log_at_trx_commit 设置为 2。这样做的风险是，主机掉电的时候会丢数据。&lt;/li>
&lt;/ul>
&lt;h2 id="场景题">场景题
&lt;/h2>&lt;h3 id="1-在什么情况下会出现查一行数据会执行得特别慢的现象">1. 在什么情况下会出现查一行数据会执行得特别慢的现象？
&lt;/h3>&lt;p>等锁&lt;/p>
&lt;ul>
&lt;li>等表级锁，例如MDL写锁&lt;/li>
&lt;li>等flush表&lt;/li>
&lt;li>等行锁&lt;/li>
&lt;/ul>
&lt;p>查询慢&lt;/p>
&lt;ul>
&lt;li>没有走索引，全表扫描&lt;/li>
&lt;li>回滚日志过大引起的一致性读慢&lt;/li>
&lt;/ul>
&lt;h3 id="2-业务高峰期生产环境的-mysql-压力太大没法正常响应有哪些方案可以短期内临时性地提升一些性能">2. 业务高峰期，生产环境的 MySQL 压力太大，没法正常响应，有哪些方案可以短期内、临时性地提升一些性能。
&lt;/h3>&lt;p>第一种情况：短连接风暴&lt;/p>
&lt;p>当处于业务高峰期时候，MySQL 建立连接的过程，除了正常的网络连接三次握手外，还需要做登录权限判断和获得这个连接的数据读写权限，成本较高&lt;/p>
&lt;p>解决方案：&lt;/p>
&lt;ul>
&lt;li>第一种方法：先处理掉那些占着连接但是不工作的线程。
&lt;ul>
&lt;li>可以设置wait_timeout参数，将一个线程空闲 wait_timeout 这么多秒之后，就会被 MySQL 直接断开连接。&lt;/li>
&lt;li>优先断开事务外的连接&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>第二种方法：减少连接过程的消耗。让数据库跳过权限验证阶段。&lt;/li>
&lt;/ul>
&lt;p>第二种情况：慢查询引起的性能问题&lt;/p>
&lt;p>存在三种可能&lt;/p>
&lt;ul>
&lt;li>索引没有设计好；
&lt;ul>
&lt;li>解决方案：在主从库上紧急添加索引&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SQL 语句没写好；（可能没有用索引等）
&lt;ul>
&lt;li>解决方案：query_rewrite 功能，可以把输入的一种语句改写成另外一种模式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MySQL 选错了索引。
&lt;ul>
&lt;li>解决方案：使用查询重写功能，给原来的语句加上 force index，&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>第三种情况：QPS 突增问题&lt;/p>
&lt;p>采用虚拟化、白名单机制、业务账号分离等方法，然后相关服务停掉。&lt;/p>
&lt;h3 id="3-全表扫描server层的流程">3. 全表扫描，server层的流程
&lt;/h3>&lt;ul>
&lt;li>获取一行，写到 net_buffer 中。这块内存的大小是由参数 net_buffer_length 定义的，默认是 16k。&lt;/li>
&lt;li>重复获取行，直到 net_buffer 写满，调用网络接口发出去。&lt;/li>
&lt;li>如果发送成功，就清空 net_buffer，然后继续取下一行，并写入 net_buffer。&lt;/li>
&lt;li>如果发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，就表示本地网络栈（socket send buffer）写满了，进入等待。直到网络栈重新可写，再继续发送。&lt;/li>
&lt;/ul></description></item></channel></rss>